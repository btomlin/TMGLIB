TMGRX001 ;TMG/kst/Patient medication code; 08/23/17
       ;;1.0;TMG-LIB;**1**;08/23/17
 ;
 ;"Code for parsing medication string into array
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;"Copyright (c) 08/23/17  Kevin S. Toppenberg MD
 ;"
 ;"This file is part of the TMG LIBRARY, and may only be used in accordence
 ;" to license terms outlined in separate file TMGLICNS.m, which should 
 ;" always be distributed with this file.
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;
 ;"=======================================================================
 ;" API -- Public Functions.
 ;"=======================================================================
 ;"T2 ; "TEST THE PARSED MED LIST FOR A PATIENT 
 ;"PARSEARR(OUT,ARR)  ;"PARSE A MED LIST  
 ;"PARSELN(OUT,LINE,TRAIN) ;"PARSE ONE MED LINE
 ;
 ;"=======================================================================
 ;"PRIVATE API FUNCTIONS
 ;"=======================================================================
 ;"PARS2SUM(OUT,SUMRY,TRAIN)  ;"PARSE TO SUMMARY
 ;"GETSUMRY(ARR,LINE,IEN22733,PARSESIG)  ;"GET A SUMMARY OF LINE
 ;"VERFYSUM(SUMRY,TRAIN,LINE)  ;
 ;
 ;"=======================================================================
 ;"DEPENDENCIES
 ;"=======================================================================
 ;"Uses:  
 ;"=======================================================================
 ;        
T2 ; "TEST THE PARSED MED LIST FOR A PATIENT 
  NEW X,Y,DIC SET DIC=2,DIC(0)="MAEQ"
  DO ^DIC WRITE !
  IF +Y'>0 QUIT
  NEW DFN SET DFN=+Y
  NEW ARR,TEMP
  DO MEDLIST^TMGTIUOJ(.TEMP,DFN,.ARR)
  NEW ARR2 DO PARSEARR(.ARR2,.ARR)
  ZWR ARR2
  QUIT
  ;
PARSEARR(OUT,ARR)  ;"PARSE A MED LIST  
  NEW IDX SET IDX=0 
  FOR  SET IDX=$ORDER(ARR(IDX)) QUIT:IDX'>0  DO
  . NEW LINE SET LINE=$GET(ARR(IDX)) 
  . IF $EXTRACT(LINE,1)="*" QUIT
  . IF LINE["[MEDICATION" QUIT
  . NEW TEMP
  . SET ARR(IDX)=$$PARSELN(.TEMP,LINE) 
  QUIT
  ;
PARSELN(OUT,LINE,TRAIN) ;"PARSE ONE MED LINE
  ;"Input: OUT -- PASS BY REFERENCE.  AN OUT PARAMETER.  Format:
  ;"         OUT("ORIG")=The original unparsed line.  
  ;"         OUT("WORKING")=The input line, with preface removed and arrows fixed  
  ;"         OUT("NOTE")=<any notes>  DELIMITED BY "<---" OR '>---" ...
  ;"         OUT("MED NAME")=<NAME OF RX>  <-- last Rx name encountered on line
  ;"         OUT("GENERIC")=<NAME OF RX>
  ;"         OUT("BRAND")=<NAME OF RX>
  ;"         OUT("SIG")="AS NEEDED"
  ;"         OUT("DOSE IENS",<IENS>)=<DOSE_NAME> , e.g. TAB
  ;"         OUT("OTC")=1  <-- if specified as OTC
  ;"         OUT("DOSE")=#
  ;"         OUT("UNITS")=E.G. "MG"
  ;"         OUT("IEN50.607")=#  <-- this is UNITS IEN
  ;"         OUT("PREFACE")= e.g. HOLD, HOLDING, OFF
  ;"         OUT("IEN22733")=<IEN 22733>
  ;"       LINE -- a string of text representing one medication line from med table.
  ;"       TRAIN -- OPTIONAL.  If 1 then user is queried at command-line if needed during training
  SET OUT("ORIG")=LINE
  SET LINE=$$UP^XLFSTR(LINE)
  DO FIXARRWS^TMGRX004(.LINE) ;"FIX ARROWS
  DO XTRCTNTE^TMGRX004(.OUT,.LINE)  ;"EXTRACT NOTE
  DO CHKPREFX^TMGRX004(.OUT,.LINE)  ;"CHECK AND REMOVE PREFIXES (INCLUDING OTC)
  NEW FOUND,ABORT SET (FOUND,ABORT)=0
  SET OUT("WORKING")=LINE
  NEW SUMRY
  IF $$PARS2SUM(.OUT,.SUMRY,.TRAIN)=0 GOTO PRSLNDN   ;"RETURNS OUT("SUMMARY")
  SET LINE=OUT("WORKING")
  NEW IDX SET IDX=0
  FOR  SET IDX=$ORDER(SUMRY(IDX)) QUIT:IDX'>0  DO
  . NEW WORD MERGE WORD=SUMRY(IDX) SET WORD=$GET(WORD)
  . IF WORD'["{{" QUIT
  . NEW SOURCE SET SOURCE=$GET(WORD("SOURCE"))
  . SET WORD=$PIECE($PIECE(WORD,"}}",1),"{{",2)
  . IF WORD="DRUG_GENERIC" DO  QUIT
  . . SET OUT("GENERIC")=SOURCE
  . . IF SOURCE'="" SET OUT("MED NAME")=SOURCE
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="DRUG_ALIAS" DO  QUIT
  . . SET OUT("GENERIC")=SOURCE
  . . IF SOURCE'="" SET OUT("MED NAME")=SOURCE
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="DRUG_BRAND" DO  QUIT
  . . SET OUT("BRAND")=SOURCE
  . . IF SOURCE'="" SET OUT("MED NAME")=SOURCE
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="DOSE" DO  QUIT
  . . SET OUT("DOSE")=SOURCE
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . . DO MATCHDSE^TMGRX004(.OUT)  ;"TRY TO MATCH DOSES TO DATABASE. 
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="MODIFIER" DO  QUIT
  . . SET OUT("MODIFIER")=SOURCE
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="UNIT" DO  QUIT
  . . SET OUT("UNITS")=SOURCE
  . . SET OUT("IEN50.607")=$GET(WORD("UNIT IEN"))
  . . SET OUT("SIG")=$$ARR2LN2^TMGRX004("SUMRY",IDX+.1)
  . IF WORD="ROUTE" DO
  . . SET OUT("SIG","ROUTE")=SOURCE
  . IF WORD="FREQ" DO
  . . SET OUT("SIG","FREQ")=SOURCE
PRSLNDN  ;  
  QUIT
  ;
PARS2SUM(OUT,SUMRY,TRAIN)  ;"PARSE TO SUMMARY
  ;"INPUT:  OUT -- PASS BY REFERENCE.  Contains many objects. 
  ;"             Must hold OUT("WORKING")=LINE
  ;"        TRAIN -- OPTIONAL.  If 1 then interactive process
  ;"RESULT: 1 if successful, 0 if not
  NEW LINE SET LINE=OUT("WORKING")
  SET TRAIN=+$GET(TRAIN)
  NEW RESULT SET RESULT=0
  NEW WORD,IDX
  NEW LEN SET LEN=$$WORDLEN^TMGRX004(LINE)
  NEW IEN22733 SET IEN22733=0
  FOR I=1:1:LEN DO  QUIT:IEN22733>0
  . DO GETNXWRD^TMGRX004(.LINE,.WORD)
  . SET IEN22733=$$MEDIEN^TMGRX004(,.WORD,LINE)   
  . IF IEN22733>0 QUIT
  . SET OUT("PREFACE")=$GET(OUT("PREFACE"))_WORD_$GET(WORD("DIV"))
  . SET OUT("WORKING")=LINE
  IF IEN22733'>0 GOTO P2SDN  
  SET OUT("IEN22733")=IEN22733
  NEW TEMPLINE SET TEMPLINE=LINE DO PUTBKWRD^TMGRX004(.TEMPLINE,.WORD)
  DO GETSUMRY(.SUMRY,TEMPLINE,IEN22733,1)  ;"GET A SUMMARY OF LINE
  IF $$VERFYSUM(.SUMRY,.TRAIN,OUT("WORKING")) DO
  . SET RESULT=1
P2SDN ;  
  QUIT RESULT
  ;
GETSUMRY(ARR,LINE,IEN22733,PARSESIG)  ;"GET A SUMMARY OF LINE
  NEW DICT DO GETDICT^TMGRX004(.DICT,IEN22733)
  NEW RESULT SET RESULT("ORIG")=LINE
  SET PARSESIG=$GET(PARSESIG)
  SET ARR=LINE
  NEW WORD,LINEARR,REFNUM SET REFNUM=1
  DO  ;"Before checking word by word, first look for combo words, e.g. LISINOPRIL/HCTZ
  . NEW ALEN SET ALEN=""
  . FOR  SET ALEN=$ORDER(DICT("ZZLEN",ALEN),-1) QUIT:ALEN'>0  DO
  . . NEW AWORD SET AWORD=""
  . . FOR  SET AWORD=$ORDER(DICT("ZZLEN",ALEN,AWORD)) QUIT:AWORD=""  DO
  . . . NEW DIV SET DIV=$$NEXTCH^TMGSTUT3(AWORD,0,"/","-")
  . . . IF DIV="" QUIT  ;"WORD doesn't contain / or -, so not combo word, handle below
  . . . IF LINE'[AWORD QUIT
  . . . NEW TYPE SET TYPE=$GET(DICT("ZZLEN",ALEN,AWORD))
  . . . SET ARR=$$REPLSTR^TMGSTUT3(ARR,AWORD,"{{"_TYPE_"^"_REFNUM_"}}")
  . . . SET ARR("SOURCE",REFNUM)=AWORD,REFNUM=REFNUM+1
  DO LINE2ARR^TMGRX004(.LINEARR,ARR) 
  NEW IDX SET IDX=0
  FOR  SET IDX=$ORDER(LINEARR("WORD",IDX)) QUIT:IDX=""  DO
  . KILL WORD SET WORD=$GET(LINEARR("WORD",IDX)) 
  . QUIT:$EXTRACT(WORD,1,2)="{{"
  . NEW STRIPWORD SET STRIPWORD=$$STRIPWD^TMGRX004(WORD)
  . NEW TYPE SET TYPE=""
  . IF $DATA(DICT(STRIPWORD))>0 DO
  . . SET TYPE=$GET(DICT(STRIPWORD))
  . . SET FRACT=($GET(DICT(STRIPWORD,"FRACT"))=1)  ;"<-----  ??   
  . ELSE  DO
  . . DO WORDINFO^TMGRX004(.STRIPWORD)
  . . IF $GET(STRIPWORD("TIME"))'="" SET TYPE="TIME" QUIT
  . . IF $GET(STRIPWORD("NUM"))'="" SET TYPE="NUM" QUIT
  . . IF PARSESIG,$$ISROUTE^TMGRX004(WORD) SET TYPE="ROUTE" QUIT
  . . IF PARSESIG,$$ISFREQ^TMGRX004(WORD) SET TYPE="FREQ" QUIT
  . IF TYPE'="" DO
  . . SET LINEARR("WORD",IDX)="{{"_TYPE_"^"_REFNUM_"}}"
  . . SET ARR("SOURCE",REFNUM)=WORD,REFNUM=REFNUM+1  
  SET ARR=$$ARR2LINE^TMGRX004(.LINEARR)
  MERGE ARR=LINEARR
  SET RESULT=ARR
  SET IDX=0 FOR  SET IDX=$ORDER(ARR("WORD",IDX)) QUIT:IDX'>0  DO
  . NEW WORD MERGE WORD=ARR("WORD",IDX) SET WORD=$GET(WORD) 
  . SET RESULT(IDX)=WORD
  . SET RESULT(IDX,"DIV")=$GET(WORD("DIV"))
  . QUIT:(WORD'["^")!(WORD'["{{")
  . SET REFNUM=+$PIECE(WORD,"^",2)
  . SET RESULT(IDX)=$PIECE(WORD,"^",1)_"}}"
  . NEW SOURCE SET SOURCE=$GET(ARR("SOURCE",REFNUM))
  . SET RESULT(IDX,"SOURCE")=SOURCE 
  . IF $GET(WORD("UNIT IEN"))>0 SET RESULT(IDX,"UNIT IEN")=WORD("UNIT IEN")
  SET RESULT=$$ARR2LN2^TMGRX004("RESULT")
  KILL ARR MERGE ARR=RESULT
  QUIT 
  ;
VERFYSUM(SUMRY,TRAIN,LINE)  ;
  ;"INPUT: SUMRY -- PASS BY REFERENCE.  The array, as created by PARS2SUM
  ;"       TRAIN -- OPTIONAL.  If 1 then interactive process
  ;"       LINE -- OPTIONAL IF TRAIN NOT 1. REQUIRED IF TRAIN=1.  Line being parsed
  ;"RESULT: 1 if successful, 0 if not, -1 if ABORT
  ;
  NEW RESULT SET RESULT=0
  NEW MATCH
  NEW DONE SET DONE=0
  NEW TEMPSUMRY MERGE TEMPSUMRY=SUMRY
  NEW IDX SET IDX=0
  FOR  SET IDX=$ORDER(TEMPSUMRY(IDX)) QUIT:IDX'>0  DO
  . NEW WORD SET WORD=$GET(TEMPSUMRY(IDX))
  . IF (WORD'["{{")&(WORD'="") KILL TEMPSUMRY(IDX) 
  SET TEMPSUMRY=$$ARR2LN2^TMGRX004("TEMPSUMRY")
VL1 ;  
  NEW ASUMRY SET ASUMRY=""
  FOR  SET ASUMRY=$ORDER(^TMG(22733.1,"B",ASUMRY)) QUIT:(ASUMRY="")!DONE  DO
  . IF $$LMATCH^TMGSTUT3(TEMPSUMRY,ASUMRY)=0 DO  QUIT
  . . IF $DATA(MATCH)>0 SET DONE=1  ;"We had a prior match, but now are past matches in list, so stop
  . NEW IEN SET IEN=0
  . FOR  SET IEN=$ORDER(^TMG(22733.1,"B",ASUMRY,IEN)) QUIT:IEN'>0  DO
  . . NEW FULLSUM SET FULLSUM=$PIECE($GET(^TMG(22733.1,IEN,0)),"^",1)
  . . IF $$LMATCH^TMGSTUT3(TEMPSUMRY,FULLSUM)=0 QUIT
  . . SET MATCH($LENGTH(FULLSUM),FULLSUM)=""  ;"but keep searching for a longer match
  NEW MAXLEN SET MAXLEN=$ORDER(MATCH(""),-1)
  SET MATCH=$ORDER(MATCH(MAXLEN,""))
  SET RESULT=(MATCH'="")
  IF $GET(TRAIN)'=1 GOTO VFPTDN
  IF TEMPSUMRY=MATCH GOTO VFPTDN
  NEW I FOR I=1:1:16 WRITE "*",!  ;"<--- DELETE LATER
  WRITE "ORIG: ",LINE,!
  WRITE "SUMMARY: ",TEMPSUMRY,!
  SET %=0 IF MATCH'="" DO
  . WRITE "  MATCH: ",MATCH,!
  . SET %=2 WRITE "MATCH OK" DO YN^DICN WRITE !
  IF %=-1 SET RESULT="-1^ABORT" GOTO VFPTDN
  IF %=1 GOTO VFPTDN
  WRITE !,"The summary object can't be used unless it has been saved.",!
  WRITE "It SHOULD be saved unless it contains errors of matching.",!,!
  SET %=2 WRITE "Does SUMMARY above have any parsing errors" DO YN^DICN WRITE !
  IF %=-1 SET RESULT=-1 GOTO VFPTDN
  IF %=1 GOTO VFPTDN  
  WRITE "DELETE invalid or non-universal part of summary",!
  WRITE TEMPSUMRY
  NEW VALUE SET VALUE=$$READKY^TMGUSRI5("er",,,TEMPSUMRY) WRITE !
  IF VALUE'=TEMPSUMRY GOTO VL1
  SET %=2 WRITE "SAVE: ",VALUE,":" DO YN^DICN WRITE !
  IF %=-1 SET RESULT=-1 GOTO VFPTDN
  IF %=2 GOTO VFPTDN
  NEW TMGFDA,TMGIEN,TMGMSG
  SET TMGFDA(22733.1,"+1,",.01)=VALUE
  DO UPDATE^DIE("","TMGFDA","TMGIEN","TMGMSG")
  IF $DATA(TMGMSG("DIERR")) DO  GOTO VFPTDN
  . WRITE "ERROR:",!,$$GETERRST^TMGDEBU2(.TMGMSG)
  SET RESULT=1
  ;
VFPTDN ;  
  QUIT RESULT
  ;
