TMGNDF3A ;TMG/kst/FDA Import: Drug class stuff ;03/25/06, 2/2/14
         ;;1.0;TMG-LIB;**1**;11/21/06

 ;" FDA - NATIONAL DRUG FILES COMPILING FUNCTIONS
 ;"      Further processing, after functions in TMGNDF2C
 ;"      Primarily working VA DRUG CLASS stuff.
 ;
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;"Copyright (c) 6/23/2015  Kevin S. Toppenberg MD
 ;"
 ;"This file is part of the TMG LIBRARY, and may only be used in accordence
 ;" to license terms outlined in separate file TMGLICNS.m, which should 
 ;" always be distributed with this file.
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;
 ;"=======================================================================
 ;" API -- Public Functions.
 ;"=======================================================================
 ;"Menu
 ;"=======================================================================
 ;"FillFromVADrugClass -- ensure that all the entries in TMG FDA IMPORT COMPILED
 ;"                   have a value for field VA DRUG CLASS
 ;"HandleEmptyClasses -- allow classification of all unclassified drugs (ones
 ;"                      with no potential match found in VistA database as a
 ;"                      starting point)

 ;"=======================================================================
 ;" Private Functions.
 ;"=======================================================================
 ;"ShowClasses  -- Display all the drug classes, in a heirarchy.
 ;"GetClasses(Array) -- Purpose: To get an array back the shows the heirarchy of all VA DRUG classes
 ;"KillIntro(Array) One of the drug classes is AA000, INTRODUCTION.  This will KILL entry from the Array
 ;"GetClHeirarchy(ClassIEN,Array) -- get an array back the shows the heirarchy of one VA DRUG class
 ;"FixClasses -- fix VA DRUG CLASS records which are not properly linked into the heirarchy.
 ;"Fix1Class(IEN)  -- fix the parent entry of one erroneous class, in the VA DRUG CLASS heirarchy.
 ;"GetInfo(IEN,Array) -- fill record from VA DRUG CLASS file into a usable array
 ;"TestSelectClass
 ;"$$SelectClass(Array,AskSub) -- Allow user to browse Array and select drug class
 ;"Search4Class() -- use Fileman to search for a drug class
 ;"$$SelectFrom(pRef) -- Allow user to browse Array and select drug class
 ;"SrchItems(input,Items)  -- Search through Items array for input, and return index number IF found
 ;"TestGather
 ;"GatherClasses(Array)
 ;"GetPossClass(IEN,Array) -- gather, from a list of possible drug matches, a list of possible VA DRUG CLASSESS
 ;"VerifyClasses(Array) -- allow user to accept or reject proposed drug class for NEW drugs.
 ;"ShowInstructions()
 ;"LookupHelp()
 ;"FindHelp()
 ;"SimHelp()
 ;"ShowList(Array,Answers,CompactMode,ShowBoth) -- To display the list generated by GatherClasses, by class orginization
 ;"DoSetClass(Array,Answers,List) -- add ClassIEN to field .09 (VA DRUG CLASS) in file TMG FDA IMPORT COMPILED
 ;"ShowInfo(Array,Answers,Num) -- show more about the specified drug
 ;"DoRemove(Array,Answers,List,ByTradeName,FromECode,Cancelled) -- remove entries from Array and Answers
 ;"DoLookup(Array,Answers,Classes,List,Cancelled) -- Manually lookup class for entries
 ;"WriteClass(ClassIEN,Array,Answers,List) -- DO the actual setting of the class
 ;"ClrAnswers(Array,Answers,List,FromECode,UndoArray) -- remove entries from Array and Answers array.
 ;"VerifyWrite(ClassName,Answers,List) -- display list of entries and ask user IF class SET is desired
 ;"Disp2List(Answers,List,ByTradeName,ShowBoth) -- interfact to DisplayList function, to allow easier input.
 ;"DisplayList(Answers,List,Piece,AlsoPiece) -- display list of entries
 ;"SimilarPick(Array,Answers,List,Cancelled) -- allow user to specify that a SET of numbers should use the same class as
 ;"FindPick(Array,Answers,List,FromECode,Cancelled) -- allow user to look up a drug already in the VistA database, and use the

 ;"GatherEmpties(Array) -- scan through all records in TMG FDA IMPORT COMPILED, and create an array of
 ;"ShowEList(Array,Answers,CompactMode,ByTradeName,ShowBoth) -- display the list of 'Empty' classes generated by GatherEmpties
 ;"ClassEClasses(Array) -- allow user to classify drugs with empty (none) VA Drug Class
 ;"DoGuess(Array,Answers,EntryList,Cancelled,Classes) -- a wrapper for DoEGuess
 ;"DoEGuess(Array,Answers,List,ByTradeName,ShowBoth,Cancelled,FormECode,Classes) - guess as classification for entries.
 ;"GGuessList(Array,Answers,List,Results) -- gather a guessing list of possible classes for each entry in List
 ;"AutoEClassification(Array) --  attempt to automatically classiffy drugs that have not potential match
 ;"Guess1(Array,Answers,List) -- return a guessed class, IF there is only one possible guess.
 ;"DoSetTools(Array,Answers,List,EntryS,ByTradeName,ShowBoth) -- tools for managing SETS to be worked on (List)
 ;"MkSrchList(Answers,List,ByTradeName,ShowBoth) -- search through Answers for string

 ;"=======================================================================
 ;"=======================================================================

 ;"This block of code will deal with establishing the VA DRUG CLASS

Menu
        ;"Purpose: Provide menu to entry points of main routines

        NEW Menu,UsrSlct
        SET Menu(0)="Pick Option for Filling Import Drug Class (3A)"
        SET Menu(1)="Set class by Linked VA PRODUCT entry IF Possible"_$CHAR(9)_"FillByLink"
        SET Menu(2)="Fill DRUG class for IMPORT entries from best guess."_$CHAR(9)_"FillFromVADrugClass"
        SET Menu(3)="Fill DRUG class for IMPORT entries with no guess."_$CHAR(9)_"HandleEmptyClasses"
        SET Menu(4)="Use SELECTOR to browse and edit IMPORT classes"_$CHAR(9)_"SelEdClasses"
        SET Menu(5)="Pick just 1 import and edit drug Class"_$CHAR(9)_"Edit1"
        SET Menu(6)="Pick imports to SKIP based on their drug CLASS"_$CHAR(9)_"PickSkips"
        SET Menu("P")="Prev Stage"_$CHAR(9)_"Prev"
        SET Menu("N")="Next Stage"_$CHAR(9)_"Next"

MC1
        WRITE #
        SET UsrSlct=$$MENU^TMGUSRI2(.Menu,"^")
        IF UsrSlct="^" GOTO MCDone
        IF UsrSlct=0 SET UsrSlct=""

        IF UsrSlct="FillFromVADrugClass" DO FillFromVADrugClass GOTO MC1
        IF UsrSlct="HandleEmptyClasses" DO HandleEmptyClasses GOTO MC1
        IF UsrSlct="FillByLink" DO FillByLink GOTO MC1
        IF UsrSlct="SelEdClasses" DO SelEdClasses GOTO MC1
        IF UsrSlct="Edit1" DO Ed1Classes GOTO MC1

        IF UsrSlct="PickSkips" DO PickSkips^TMGNDF3B GOTO MC1

        IF UsrSlct="Prev" GOTO Menu^TMGNDF2H  ;"QUIT can occur from there...
        IF UsrSlct="Next" GOTO Menu^TMGNDF3C  ;"QUIT can occur from there...

        GOTO MC1
MCDone
        QUIT



FillFromVADrugClass
        ;"Purpose: to provide a high-level entry point for ensuring that all the entries
        ;"      in TMG FDA IMPORT COMPILED have a value for field VA DRUG CLASS

        WRITE #
        WRITE "======================================================",!
        WRITE "Link FDA import entries to proper VA DRUG CLASS",!
        WRITE "======================================================",!,!

        ;"do FillByLink  ;"see IF any easy links are all ready to go...
        NEW list
        NEW % SET %=2
        IF $DATA(^TMG("TMP","DRUGS NEEDING CLASS"))>0 do
        . WRITE !,"Infomation from a prior run found.",!
        . WRITE "Use older info (recommended only during the same import cycle)"
        . SET %=1 DO YN^DICN WRITE !
        . IF %=1 do
        . . WRITE "Loading... "
        . . MERGE list=^TMG("TMP","DRUGS NEEDING CLASS")
        . . WRITE "Done.",!
        IF (%=-1) GOTO FDCDone
        IF (%=2) do
        . WRITE "Scanning drug file...",!
        . DO GatherClasses(.list)
        . DO AutoEClassification(.list)
        DO VerifyClasses(.list)

        SET %=1
        WRITE "Save information for future use"
        DO YN^DICN WRITE !
        IF %=1 DO SaveList(.list)

FDCDone WRITE "Done.",!
        QUIT


SaveList(List)
        ;"Purpse: save list
        KILL ^TMG("TMP","DRUGS NEEDING CLASS")
        MERGE ^TMG("TMP","DRUGS NEEDING CLASS")=list

        QUIT


FillByLink
        ;"Purpose: Fill Drug class for any drug that has an empty class, but points to
        ;"         an entry in 50.68

        WRITE "Setting DRUG CLASS of imports from VA PRODUCT link, IF possible.",!
        NEW count SET count=0
        NEW Itr,IEN
        SET IEN=$$ItrInit^TMGITR(22706.9,.Itr)
        DO PrepProgress^TMGITR(.Itr,20,0,"IEN")
        IF IEN'="" FOR  DO  QUIT:($$ItrNext^TMGITR(.Itr,.IEN)'>0)
        . IF $PIECE($GET(^TMG(22706.9,IEN,1)),"^",4)=1 QUIT  ;"1=SKIP
        . NEW CurClass,newClass
        . SET CurClass=+$PIECE($GET(^TMG(22706.9,IEN,1)),"^",5)
        . IF CurClass=0 do
        . . NEW vapIEN SET vapIEN=+$PIECE($GET(^TMG(22706.9,IEN,2,1,0)),"^",1)
        . . IF vapIEN=0 QUIT
        . . SET newClass=+$PIECE($GET(^PSDNF(50.68,vapIEN,3)),"^",1)
        . . IF newClass'=0 do
        . . . ;"WRITE IEN," can be loaded with class: ",newClass,!
        . . . NEW TMGFDA,TMGMSG
        . . . SET TMGFDA(22706.9,IEN_",",.09)=newClass
        . . . ;"set $PIECE(^TMG(22706.9,IEN,1),"^",5)=newClass
        . . . DO FILE^DIE("K","TMGFDA","TMGMSG")
        . . . DO ShowIfDIERR^TMGDEBUG(.TMGMSG)
        . . . SET count=count+1
        DO ProgressDone^TMGITR(.Itr)

        WRITE count," entries modified.",!
        DO PRESS2GO^TMGUSRI2
        QUIT


ShowClasses
        ;"Purpose: to display all the drug classes, in a heirarchy.

        NEW Array
        DO GetClasses(.Array)
        ;"DO ArrayDump^TMGDEBUG("Array")
        DO ARRDUMP^TMGMISC3("Array")
        QUIT


GetClasses(Array)
        ;"Purpose: To get an array back the shows the heirarchy of all VA DRUG classes
        ;"       Array -- PASS BY REFERENCE, and OUT PARAMETER
        ;"Output: Array will be filled as follows:
        ;"           Array(GGF-IEN)=e.g. ""AD000^ANTIDOTES,DETERRENTS AND POISON CONTROL"
        ;"           Array(GGF-IEN,GF-IEN)=e.g. "AD100^ALCOHOL DETERRENTS"
        ;"           Array(GGF-IEN,GF-IEN,F-IEN)=e.g. "AD150^ALCOHOL DETERRENTS -- GENERAL TYPE 1"
        ;"           Array(GGF-IEN,GF-IEN,F-IEN,IEN)=e.g. "AD152^ALCOHOL DETERRENTS -- GENERAL TYPE 1b"
        ;"        Note: prior entries in Array are NOT killed.
        ;"Results: none

        NEW IEN
        SET IEN=$ORDER(^PS(50.605,0))
        IF +IEN>0 FOR  DO  QUIT:(+IEN'>0)
        . DO GetClHeirarchy(IEN,.Array)
        . SET IEN=$ORDER(^PS(50.605,IEN))

        QUIT

KillIntro(Array)
        ;"Purpose: One of the drug classes is AA000, INTRODUCTION.  This will KILL this
        ;"              entry from the Array
        ;"Input: Array -- Array, as created by GetClasses

        NEW IEN
        SET IEN=$ORDER(Array(""))
        IF IEN'="" FOR  DO  QUIT:(IEN="")
        . NEW temp SET temp=IEN
        . SET IEN=$ORDER(Array(IEN))
        . IF $PIECE(Array(temp),"^",1)="AA000" KILL Array(temp)

        QUIT


GetClHeirarchy(ClassIEN,Array)
        ;"Purpose: To get an array back the shows the heirarchy of one VA DRUG class
        ;"Input: ClassIEN -- the IEN in file VA DRUG CLASS (50.605)
        ;"       Array -- PASS BY REFERENCE, and OUT PARAMETER
        ;"Output: Array will be filled as follows:
        ;"           Array(GGF-IEN)=e.g. ""AD000^ANTIDOTES,DETERRENTS AND POISON CONTROL"
        ;"           Array(GGF-IEN,GF-IEN)=e.g. "AD100^ALCOHOL DETERRENTS"
        ;"           Array(GGF-IEN,GF-IEN,F-IEN)=e.g. "AD150^ALCOHOL DETERRENTS -- GENERAL TYPE 1"
        ;"           Array(GGF-IEN,GF-IEN,F-IEN,IEN)=e.g. "AD152^ALCOHOL DETERRENTS -- GENERAL TYPE 1b"
        ;"        Note: prior entries in Array are NOT killed.
        ;"Results: none

        NEW ParentClass,indent
        NEW ResultArray

        IF (+ClassIEN'=0) FOR  DO  QUIT:(+ClassIEN=0)
        . NEW tempArray
        . IF $DATA(ResultArray) do
        . . NEW temp MERGE temp=ResultArray
        . . KILL ResultArray
        . . MERGE ResultArray(ClassIEN)=temp
        . NEW Curnode,Code,Name,CodeNum
        . SET Curnode=$GET(^PS(50.605,ClassIEN,0))
        . SET Code=$PIECE(Curnode,"^",1)
        . SET CodeNum=+$EXTRACT(Code,3,5)
        . SET Name=$PIECE(Curnode,"^",2)
        . SET tempArray(ClassIEN)=Code_"^"_Name
        . SET ParentClass=$PIECE(Curnode,"^",3)
        . IF ParentClass=ClassIEN SET ParentClass=0  ;"I found at least one circular ref.
        . IF (ParentClass=0)&(CodeNum'=0) do
        . . WRITE IEN,":  ",Name," appears broken: ",Code," Will fix...",!
        . . DO Fix1Class(IEN)
        . SET ClassIEN=ParentClass
        . MERGE ResultArray=tempArray

        MERGE Array=ResultArray

        QUIT


FixClasses
        ;"Purpose: I have found a few instances in the VA DRUG CLASS file where records are
        ;"         not properly linked into the heirarchy.  They either give themselves as
        ;"         their own parents, or list no parent, though one should be present.
        ;"         If any such entries exist, this function will fix them.

        NEW IEN
        SET IEN=$ORDER(^PS(50.605,0))
        IF +IEN>0 FOR  DO  QUIT:(+IEN'>0)
        . NEW Curnode,Code,CodeNum,Name
        . SET Curnode=$GET(^PS(50.605,IEN,0))
        . SET Code=$PIECE(Curnode,"^",1)
        . SET CodeNum=+$EXTRACT(Code,3,5)
        . SET Name=$PIECE(Curnode,"^",2)
        . SET ParentClass=+$PIECE(Curnode,"^",3)
        . IF ParentClass=IEN SET ParentClass=0
        . IF (ParentClass=0)&(CodeNum'=0) do
        . . WRITE IEN,":  ",Name," appears broken: ",Code," Will fix...",!
        . . IF $GET(TMGFIX)=1 DO Fix1Class(IEN)
        . SET IEN=$ORDER(^PS(50.605,IEN))

        QUIT


Fix1Class(IEN)
        ;"Purpose: To fix the parent entry of one erroneous class, in the VA DRUG CLASS heirarchy.
        ;"Input: IEN -- the record number in VA DRUG CLASS to fix
        ;"Output: the database will be changed
        ;"Results: none.

        NEW Curnode,Code,CodeNum,ParentCode
        NEW ParentClass,NewParentClass

        SET Curnode=$GET(^PS(50.605,IEN,0))
        SET Code=$PIECE(Curnode,"^",1)
        SET ParentClass=+$PIECE(Curnode,"^",3)

        SET ParentCode=$EXTRACT(Code,1,2)_"000"
        SET NewParentClass=+$ORDER(^PS(50.605,"B",ParentCode,""))

        IF NewParentClass'=0 do
        . SET $PIECE(^PS(50.605,IEN,0),"^",3)=NewParentClass

        QUIT


GetInfo(IEN,Array)
        ;"Purpose: to fill record from VA DRUG CLASS file into a usable array
        ;"Input: IEN -- the IEN from VA DRUG CLASS file to get info for
        ;"       Array -- PASS BY REFERENCE, to be filled in with data.  Old data is KILLED.
        ;"Output: Array is filled with data:
        ;"              Array("NAME")=name
        ;"              Array("CODE")=code
        ;"              Array("PARENT IEN")=parent IEN
        ;"Result: none

        NEW Curnode
        KILL Array

        SET Curnode=$GET(^PS(50.605,IEN,0))
        SET Array("CODE")=$PIECE(Curnode,"^",1)
        SET Array("NAME")=$PIECE(Curnode,"^",2)
        SET Array("PARENT IEN")=+$PIECE(Curnode,"^",3)

        QUIT

 ;"----------------------
TestSelectClass

        NEW Array,IEN

        DO GetClasses(.Array)
        DO KillIntro(.Array)
        SET IEN=$$SelectClass(.Array,1)

        WRITE "IEN=",IEN,!

        QUIT


SelectClass(Array,AskSub)
        ;"Purpose: Allow user to browse Array and select drug class
        ;"Input: Array -- An Array containing Drug Class info, as created by GetClasses()
        ;"       AskSub -- OPTIONAL.  If 1, user is asked IF they want to browse sub-class (auto otherwise)
        ;"Results: Returns IEN of selected class, or 0 IF not selected

        NEW IEN,done
        SET done=0
        SET AskSub=$GET(AskSub,0) ;"default=automatic browse of subclasses
        NEW pRef SET pRef=$name(Array)

        FOR  DO  QUIT:(done=1)
        . SET IEN=$$SelectFrom(pRef)
        . IF IEN=0 DO  QUIT
        . . IF $qlength(pRef)>0 do
        . . . SET pRef=$name(@pRef,$qlength(pRef)-1)
        . . ELSE  SET done=1
        . NEW skipSub SET skipSub=0
        . IF (AskSub=1)&($DATA(Array(IEN))>1) do
        . . NEW %
        . . WRITE "Browse sub-categories"
        . . SET %=1 DO YN^DICN WRITE !
        . . IF %'=1 SET skipSub=1
        . IF ($DATA(Array(IEN))>1)&(skipSub=0) SET pRef=$name(@pRef@(IEN))
        . ELSE  do
        . . NEW info,%
        . . DO GetInfo(IEN,.info)
        . . WRITE "Select: ",info("NAME")
        . . SET %=1 DO YN^DICN WRITE !
        . . IF %=1 SET done=1

        QUIT IEN


Search4Class()
        ;"Purpose: to use Fileman to search for a drug class
        ;"Results: Returns IEN of selected class, or 0 IF not selected

        NEW DIC,X,Y
        SET DIC=50.605
        SET DIC(0)="AEQM"
        SET DIC("A")="Enter a DRUG CLASS to search for // "
        DO ^DIC WRITE !
        NEW result SET result=0
        IF +Y>0 SET result=+Y
        QUIT result


SelectFrom(pRef)
        ;"Purpose: Allow user to browse Array and select drug class
        ;"Input: pRef -- NAME OF part of array to browse, containing Drug Class info
        ;"Results: Returns IEN of selected class, or 0 IF not selected

        NEW tempList,Items,Answers,name
        NEW i,count
        NEW result SET result=0

        SET i=""
        FOR  SET i=$ORDER(@pRef@(i)) QUIT:(+i'>0)  do
        . SET name=$PIECE($GET(@pRef@(i)),"^",2) QUIT:(name="")
        . NEW class SET class=$PIECE($GET(@pRef@(i)),"^",1) QUIT:(class="")
        . SET tempList(name)=i
        . SET tempList(name,class)=""

        SET count=1
        SET name=$ORDER(tempList(""))
        IF name'="" FOR  DO  QUIT:(name="")
        . SET Items(count)=name
        . SET Items(count,"CLASS")=$ORDER(tempList(name,""))
        . SET Answers(count)=$GET(tempList(name))
        . SET count=count+1
        . SET name=$ORDER(tempList(name))

        NEW done SET done=0
        FOR  DO  QUIT:(done=1)
        . NEW name SET name=$PIECE($GET(@pRef),"^",2)
        . IF name="" SET name="Major Drug Classes"
        . WRITE !,"Select from one of these ",name,!
        . SET i=$ORDER(Items(0))
        . IF +i>0 FOR  DO  QUIT:(+i'>0)
        . . WRITE i,".  "
        . . NEW class SET class=$GET(Items(i,"CLASS"))
        . . IF class'="" WRITE class,": "
        . . WRITE Items(i),!
        . . SET i=$ORDER(Items(i))
        . WRITE !,"Enter # of Drug Class to Pick (^ to Backup, S to Search): ^// "
        . NEW input
        . read input:$GET(DTIME,3600),!
        . SET input=$$UP^XLFSTR(input)
        . IF input="" SET input="^"
        . IF input="S" DO  QUIT:(done=1)
        . . NEW UsrIEN SET UsrIEN=$$Search4Class
        . . IF UsrIEN>0 SET result=UsrIEN,done=1
        . IF input="?" DO  QUIT
        . . DO LookupHelp()
        . . NEW temp read "-- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        . IF input="" SET input="^"
        . IF input="^" SET done=1 QUIT
        . IF +input=input do
        . . SET result=Answers(input)
        . . SET done=1
        . ELSE  do
        . . NEW temp SET temp=$$SrchItems(input,.Items)
        . . IF +temp>0 SET result=Answers(temp),done=1
        . . ELSE  WRITE "Invalid input.  Please try again.",!

        QUIT result


SrchItems(input,Items)
        ;"Purpose: to Search through Items array for input, and return index number IF found
        ;"Input:  input -- the user input -- may be a partial match for the name.
        ;"        Items -- PASS BY REFERENCE -- Input array, as created in SelectFrom()
        ;"              Items(1)=value
        ;"              Items(2)=value
        ;"              Items(3)=value
        ;"
        ;"Result: returns index of the FIRST match

        NEW result SET result=""
        NEW done SET done=0
        NEW value
        SET input=$$UP^XLFSTR($GET(input))
        NEW i SET i=$ORDER(Items(""))
        IF i'="" FOR  DO  QUIT:(i="")!(done=1)
        . SET value=$GET(Items(i))
        . SET value=$EXTRACT(value,1,$LENGTH(input))
        . IF input=value SET result=i,done=1
        . SET i=$ORDER(Items(i))

        QUIT result


 ;"=============================================
GatherClasses(Array)
        ;"Purpose: To scan through all records in TMG FDA IMPORT COMPILED, and create an array of
        ;"           possible entries for VA DRUG CLASS
        ;"Input: Array -- PASS BY REFERENCE, and OUT PARAMETER
        ;"Output: Array will be filled as follows:
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"Results: none
        ;"Note: IF SKIP THIS RECORD field is set, then record will be skipped.
        ;"      Also, IF there is already an antry for the VA DRUG CLASS field, then will be skipped.

        WRITE "Gathering information about entries with no current  DRUG CLASS",!
        NEW Itr,IEN
        SET IEN=$$ItrInit^TMGITR(22706.9,.Itr)
        DO PrepProgress^TMGITR(.Itr,20,0,"IEN")
        IF IEN'="" FOR  DO  QUIT:($$ItrNext^TMGITR(.Itr,.IEN)'>0)
        . IF $PIECE($GET(^TMG(22706.9,IEN,1)),"^",4)=1 QUIT  ;"1=SKIP
        . NEW PriorClass SET PriorClass=+$PIECE($GET(^TMG(22706.9,IEN,1)),"^",5)
        . IF PriorClass>0 QUIT
        . NEW numRecs SET numRecs=+$PIECE($GET(^TMG(22706.9,IEN,3,0)),"^",4) ;"VA PRODUCT POSS MATCH
        . IF numRecs=0 QUIT
        . DO GetPossClass(IEN,.Array)
        DO ProgressDone^TMGITR(.Itr)

        QUIT


GetPossClass(IEN,Array)
        ;"Purpose: To gather, from a list of possible drug matches, a list of possible VA DRUG CLASSESS
        ;"Input:  IEN -- IEN from TMG FDA IMPORT COMPILED (22706.9) file, to check.
        ;"        Array -- PASS BY REFERENCE.  An OUT PARAMETER
        ;"Output: Array filled as follows:
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""

        NEW subIEN
        NEW TMGTradename SET TMGTradename=$PIECE($GET(^TMG(22706.9,IEN,0)),"^",4)
        SET subIEN=$ORDER(^TMG(22706.9,IEN,3,0))
        NEW Dose SET Dose=$PIECE($GET(^TMG(22706.9,IEN,0)),"^",2)
        NEW Units SET Units=$PIECE($GET(^TMG(22706.9,IEN,0)),"^",3)

        IF +subIEN>0 FOR  DO  QUIT:(+subIEN'>0)
        . NEW DrugIEN SET DrugIEN=+$GET(^TMG(22706.9,IEN,3,subIEN,0))
        . SET subIEN=$ORDER(^TMG(22706.9,IEN,3,subIEN))
        . IF DrugIEN=0 SET Array(IEN,"?")="" QUIT
        . NEW ClassIEN SET ClassIEN=+$GET(^PSNDF(50.68,DrugIEN,3))
        . IF ClassIEN=0 SET Array(IEN,"??")="" QUIT
        . NEW Info
        . DO GetInfo(ClassIEN,.Info)
        . SET Array("POSS MATCH",$GET(Info("NAME")),TMGTradename,IEN)=ClassIEN_"^"_$GET(Info("CODE"))_"^"_Dose_" "_Units
        ELSE  do
        . SET Array(IEN,"?")=""
        . SET Array("?",IEN)=""

        QUIT



VerifyClasses(Array)
        ;"Purpose: To allow user to accept or reject proposed drug class for NEW drugs.
        ;"Input: Array -- PASS BY REFERENCE  the array generated by GatherClasses
        ;"Output: Database is changed, by adding data to field .09 (VA DRUG CLASS)
        ;"Results: none

        NEW done SET done=0
        NEW input SET input="R"
        NEW Answers
        NEW CompactMode SET CompactMode=1 ;" (list display mode: 1=compact,  0=verb
        NEW ShowBoth SET ShowBoth=1
        NEW ByIngred SET ByIngred=0
        NEW EntryList,EntryS,Fn,Cancelled
        SET Cancelled=0

        NEW Classes
        DO GetClasses(.Classes)
        DO KillIntro(.Classes)

        FOR  DO  QUIT:(done=1)
        . IF input="R" do
        . . WRITE !!
        . . WRITE "--------------------------------------------------",!
        . . WRITE "Specify which drugs are in the correct DRUG CLASS",!
        . . WRITE "--------------------------------------------------",!
        . . DO ShowList(.Array,.Answers,CompactMode,ShowBoth,ByIngred)
        . . DO SaveList(.Array) ;"1/31/07  I got tired of loosing work after crashes, so will save each time...
        . . WRITE "--------------------------------------------------",!
        . . WRITE "Specify which drugs are in the correct DRUG CLASS",!
        . . WRITE "--------------------------------------------------",!
        . . WRITE "  R to refresh, L lookup, ? for instructions, U to undo, V saVe",!
        . . WRITE "  X remove from list, N iNfo, S similar, F find",!
        . . WRITE "  C turn compact display ",$SELECT((CompactMode=1):"OFF",1:"ON"),", B turn show Both names ",$SELECT((ShowBoth=1):"OFF",1:"ON"),!
        . . WRITE "  I turn sort by Ingredients ",$SELECT((ByIngred=1):"OFF",1:"ON"),"  G Guess class",!
        . . IF $GET(EntryS)'="" WRITE " Current SET #'s: ",EntryS,",  D to delete SET",!
        . . WRITE "  # or #-# or #,#-#,# etc.,  ^ done, ",!
        . WRITE "Enter number(s) to ACCEPT drug class (or codes listed above): ^//"
        . read input:$GET(DTIME,3600),!
        . IF input="" SET input="^"
        . SET input=$$UP^XLFSTR(input)
        . IF input="^" SET done=1 QUIT
        . ELSE  IF (input="?") do
        . . DO ShowInstructions()
        . . SET input="R"
        . ELSE  IF input="N" DO  QUIT
        . . read "Enter number of drug to get info about: ^//",input,!
        . . DO ShowInfo(.Array,.Answers,+input)
        . . SET input="R"
        . ELSE  IF input="C" DO  QUIT
        . . SET CompactMode='CompactMode
        . . SET input="R"
        . ELSE  IF input="D" DO  QUIT  ;"---- delete set
        . . KILL EntryList,EntryS
        . . SET input="R"
        . ELSE  IF input="U" DO  QUIT
        . . DO Undo(.Array)
        . . SET input="R"
        . ELSE  IF input="V" DO  QUIT
        . . DO SaveList(.Array)
        . . WRITE "List Saved.",!
        . ELSE  IF input="I" DO  QUIT
        . . SET ByIngred='ByIngred
        . . SET input="R"
        . ELSE  IF input="B" DO  QUIT
        . . SET ShowBoth='ShowBoth
        . . SET input="R"
        . ELSE  IF input="L" DO  QUIT  ;"<----- Lookup manually
        . . SET Fn="do DoLookup(.Array,.Answers,.Classes,.EntryList,0,.Cancelled)"
        . . DO XMenuOption("lookup manually",Fn,"LookupHelp",.EntryList,.EntryS)
        . ELSE  IF input="G" DO  QUIT  ;" ---- guess drugs
        . . SET Fn="do DoGuess(.Array,.Answers,.EntryList,.Cancelled,.Classes)"
        . . DO XMenuOption("Guess Class",Fn,"LookupHelp",.EntryList,.EntryS)
        . ELSE  IF input="S" DO  QUIT
        . . SET Fn="do SimilarPick(.Array,.Answers,.EntryList,.Cancelled)"
        . . DO XMenuOption("classify by SIMILARITY","do SimilarPick(.Array,.Answers,.EntryList)","LookupHelp",.EntryList,.EntryS)
        . ELSE  IF input="X" DO  QUIT
        . . SET Fn="do DoRemove(.Array,.Answers,.EntryList,0,0,.Cancelled)"
        . . DO XMenuOption("REMOVE from list",Fn,"SimHelp",.EntryList,.EntryS)
        . ELSE  IF input="F" DO  QUIT
        . . SET Fn="do FindPick(.Array,.Answers,.EntryList,0,.Cancelled)"
        . . DO XMenuOption("classify by FINDING a similar drug",Fn,"FindHelp",.EntryList,.EntryS)
        . ELSE  DO  ;"default is ACCEPT
        . . SET Cancelled=0
        . . SET Fn="do DoSetClass(.Array,.Answers,.EntryList)"
        . . DO XMenuOption("",Fn,"",.EntryList,.EntryS)
        QUIT

XMenuOption(Prompt,FnStr,HlpFn,EntryList,EntryS)
        ;"Purpose: To carry out the various menu functions
        ;"Input:  Prompt: the message to use to prompt user to enter numbers etc.
        ;"                "Enter the Number(s) to" will be automatically provided
        ;"                and ": (? help) ^// " will be added at end
        ;"        FnStr: -- code to execute, e.g. "do DoLookup(.Array,.Answers,.Classes,.EntryList)"
        ;"        HlpFn: e.g. FindHelp, SimHelp, LookupHelp,  etc  Don't add () to name
        ;"        EntryList -- PASS BY REFERENCE
        ;"        EntryS -- PASS BY REFERENCE.  a string showing current SET as a string
        ;"Note: makes use of global scope of 'input', and 'CompactMode', 'Cancelled'
        ;"Result: none.

        IF $GET(EntryS)="" DO  QUIT:(valid=0)
        . IF Prompt'="" do
XMO1    . . WRITE "Enter the Number(s) to ",Prompt,": (? help) ^// "
        . . read input,!
        . . IF input="?" DO  GOTO XMO1
        . . . NEW Code SET Code="do "_HlpFn_"()"
        . . . Xecute code
        . SET valid=$$MkMultList^TMGMISC(input,.EntryList)
        . IF valid SET EntryS=input
        Xecute FnStr
        IF CompactMode=1 SET input="R"
        IF Cancelled=0 KILL EntryList,EntryS

        QUIT

ShowInstructions()
        ;"Purpose: to explain the matching proces

        NEW temp
        WRITE !,"Instruction:",!!
        WRITE "Each drug that is to be added to the VistA database should have a drug CLASS.",!
        WRITE "This class is used by VistA for drug interaction and drug allergy screening.",!
        WRITE "As drugs are imported from the FDA database, the program attempts to determine",!
        WRITE "the class automatically by comparing the drug to other drugs that have already",!
        WRITE "been classified.  This process is far from perfect and often produces incorrect",!
        WRITE "matches.  A knowledgable user (you) must review each of these potential ",!
        WRITE "classifications and either accept them IF accurate, or manually correct them.",!!
        WRITE "If a match is correct, it may be accepted by simply entering the number of the entry.",!
        WRITE "Multiple correct entries may be accepted at once by entering a range of numbers,",!
        WRITE "e.g. 3-18.  A list may also be entered, e.g. 3,7,9,15.  A combination of these may",!
        WRITE "also be entered, e.g. 1-20,32-45,50,75-100 etc.",!
        WRITE !
        WRITE "The list of drugs to be reviewed can be QUITe long (i.e. tens of thousands of ",!
        WRITE "drugs long), so a 'compact' mode is provided.  When compact mode is ON, only",!
        WRITE "the last classifaction grouping is shown.  This mode may be turned on or off by",!
        WRITE "entering 'C'",!
        WRITE !
        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        WRITE #
        WRITE !,"Instruction (continued):",!!
        WRITE "Because many drug names may be unfamiliar, one may need to review the details of the",!
        WRITE "drug entry before being able to classify it.  This may be done by typing 'I'.  This",!
        WRITE "makes use of a standard Fileman record inquiry tool.  Accept the default answers to",!
        WRITE "the questions 'STANDARD CAPTIONED OUTPUT?' and 'Include COMPUTED fields?'.  The",!
        WRITE "entry in the file TMG FDA IMPORT COMPILED (a temporary file) will be displayed.",!
        WRITE "After displaying the info, it will ask to select another entry to display.",!
        WRITE "Just press enter exit and return to the matching process.",!
        WRITE !
        WRITE "A faster way to review the ingredients of drug entries is to turn on the ingredient-",!
        WRITE "display mode with 'G'.  This will display the ingredient list after each drug in",!
        WRITE "the display.",!
        WRITE !
        WRITE "Once one is ready to correct a classification, a variety of tools are provided.",!
        WRITE "Each tool will first ask for the drug entry or entries that are to be classified.",!
        WRITE !
        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        WRITE #
        WRITE !,"Instruction (continued):",!!
        WRITE "The first classification tool is the 'F' (find) command."
        DO FindHelp()
        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        WRITE #
        WRITE !,"Instruction (continued):",!!
        WRITE "The next classification tool is the 'L' (lookup) command.",!
        DO LookupHelp()

        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        WRITE #
        WRITE !,"Instruction (continued):",!!
        WRITE "The next tool is the 'S' (similarity) command."
        DO SimHelp()

        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!
        WRITE #
        WRITE !,"Instruction (continued):",!!
        WRITE "And lastly entries may simply be removed from the list with the 'X' command.",!
        WRITE "They may be removed perminantly from consideration for addition to the Vista",!
        WRITE "database.  This is appropriate for a drug that will never be used at your",!
        WRITE "location.  Or, the drug may be just removed from the current work list.",!
        WRITE "This will leave the drugs unclassified and may cause DANGEROUS drug interactions",!
        WRITE "or drug allergies to be UNDETECTED when this drug is prescribed for a patient",!
        WRITE "later",!
        WRITE !
        read " --- Press ENTER to continue --",temp:$GET(DTIME,3600),!

        QUIT


LookupHelp()
        ;"Purpose: Show help for the Lookup functionality

        WRITE "A list of drug classifications is shown to pick from.  The VA DRUG CLASS system",!
        WRITE "arranges drug classes into a heirarchy.  And initially only the highest level",!
        WRITE "classes are shown.  Enter the number of a class to select it.  If that class has",!
        WRITE "subclasses, then these will be shown.  Select the subclass, and then verify it.",!
        WRITE "To backup, press ENTER or ^.",!
        WRITE !
        QUIT


FindHelp()
        ;"Purpose: to show help for the FIND functionality

        WRITE !
        WRITE "This command allows one to find a drug already in the VistA database, and use",!
        WRITE "it's classification for the NEW drug in question.",!
        WRITE "For example, IF one is asked to classify POTASSIUM GLUCONATE ELIXIR 20 MEQ,",!
        WRITE "there is a high likelihood that a similar drug already exists, and the matching",!
        WRITE "process failed to find it.  So search for the drug as follows:",!
        WRITE "Enter drug name with desired DRUG CLASS// potassium gluc <--partial name entered",!
        WRITE "         1   POTASSIUM GLUCONATE 2.2MEQ TAB",!
        WRITE "         2   POTASSIUM GLUCONATE 2.6MEQ TAB",!
        WRITE "         3   POTASSIUM GLUCONATE 20MEQ/15ML (SF) ELIXIR",!
        WRITE "         4   POTASSIUM GLUCONATE 20MEQ/15ML ELIXIR",!
        WRITE "         5   POTASSIUM GLUCONATE 20MEQ/15ML LIQUID",!
        WRITE "         Press <RETURN> to see more, '^' to exit this list, OR",!
        WRITE "         CHOOSE 1-5: 4  POTASSIUM GLUCONATE 20MEQ/15ML ELIXIR  <-- 4 entered",!
        WRITE !
        WRITE "         DRUG CLASS: POTASSIUM",!
        WRITE "         Use this for drug(s) below?:",!
        WRITE "         entry: POTASSIUM GLUCONATE ELIXIR",!
        WRITE "         --------------------------------------",!
        WRITE "         Use DRUG CLASS [POTASSIUM] for drug(s) above? Yes//   (Yes)",!!
        QUIT

SimHelp()
        ;"Purpose: To show help for the Find Similar functionality

        WRITE !
        WRITE "This command allows one to SET the drug class of the drug in question to be",!
        WRITE "the same as another drug shown in the display.  For example:",!
        WRITE !
        WRITE "CLASS: CEPHALOSPORIN 3RD GENERATION",!
        WRITE "6068.    TAZICEF FOR INJECTION 1 GM/VIAL",!
        WRITE !
        WRITE "CLASS: DENTIFRICES",!
        WRITE "7113.    ALBION D PASTE DESENSITIZING DENTAL PROPHYLACTIC PASTE 8 %",!
        WRITE "7114.    PLUS + WHITE DESENTIZING FLUORIDE TOOTHPASTE",!
        WRITE "7115.    TAZICEF FOR INJECTION 1 GM",!
        WRITE !
        WRITE "Here it would be useful to specify that entry 7115 is SIMILAR to 6068.",!
        WRITE "This would SET the class of 7155 to be CEPHALOSPORIN 3RD GENERATION.",!!
        QUIT


Undo(Array)
        ;"Purpose: To allow user to undo an action that was done in error
        ;"Input: Array -- PASS BY REFERENCE the array containing the data, AND UNDO info
        ;"              Array("UNDO","COUNT")=number of undo steps avail
        ;"              Array("UNDO",Event#,part#)=code to be eXecuted to reverse step.

        ;"Note: Later, I may  allow user to choose which items to undo, but for now, will
        ;"      just undo the very LAST action

        NEW UndoCt SET UndoCt=$GET(Array("UNDO","COUNT"))
        NEW i SET i=$ORDER(Array("UNDO",UndoCt,""))
        IF i'="" FOR  DO  QUIT:(i="")
        . NEW code SET code=$GET(Array("UNDO",UndoCt,i))
        . do
        . . NEW $ETRAP SET $ETRAP="w ""??Progress function -- error trapped??"",!"
        . . WRITE code,!!
        . . xecute code
        . NEW oldI SET oldI=i
        . SET i=$ORDER(Array("UNDO",UndoCt,i))
        . KILL Array("UNDO",UndoCt,oldI)
        . SET Array("UNDO","COUNT")=UndoCt-1

        QUIT


ShowList(Array,Answers,CompactMode,ShowBoth,ByIngred)
        ;"Purpose: To display the list generated by GatherClasses, by class orginization
        ;"Input: Array -- the array containing the data
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN,"INGRED")=Ingredients <--- optional
        ;"       Answers -- PASS BY REFERENCE.  An array that will like display numbers with IENs
        ;"              Answer(count)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(count)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       CompactMode -- OPTIONAL, IF value=1, then only the LAST drug class will be
        ;"              expanded (a potientially long list).  Others will just show heading.
        ;"       ShowBoth -- OPTIONAL, IF value=1, then VA GENERIC field & Tradename will be shown for each entry
        ;"       ByIngred -- OPTIONAL, IF value=1, then list is shown sorted by Generic Name
        ;"Output: List is shown, and the Answers array is established and passed back.
        ;"              Sometimes array is modified such that ingredient node is added
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN,"INGRED")=Ingredients <--- optional
        ;"Results: none.

        NEW someShown SET someShown=0
        NEW count,ClassName,LastClass
        SET count=1
        KILL Answers
        SET CompactMode=$GET(CompactMode,0)
        SET ShowBoth=$GET(ShowBoth,0)
        SET ByIngred=$GET(ByIngred,0)

        IF ByIngred=0 GOTO SL1  ;"Rather than try to MERGE the two processes, I just duplicated and modified

        ;"Display sorted by ingredients

        ;"First, resort array, by ingredients
        ;"      IngredArray format:
        ;"              IngredArray(ClassName,Ingred,IEN)=ClassIEN^ClassCode^DrugDose^TradeName
        ;"              IngredArray(ClassName,Ingred,IEN)=ClassIEN^ClassCode^DrugDose^TradeName
        NEW IngredArray
        SET LastClass=$ORDER(Array("POSS MATCH",""),-1)
        SET ClassName=$ORDER(Array("POSS MATCH",""))
        IF ClassName'="" FOR  DO  QUIT:(ClassName="")
        . WRITE !,"CLASS: ",ClassName,!
        . NEW TMGTradeName
        . NEW tempCount SET tempCount=0
        . SET TMGTradeName=$ORDER(Array("POSS MATCH",ClassName,""))
        . IF (CompactMode=1)&(ClassName'=LastClass) SET TMGTradeName=""
        . IF TMGTradeName'="" FOR  DO  QUIT:(TMGTradeName="")
        . . NEW IEN,ClassIEN
        . . SET IEN=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName,""))
        . . IF IEN>0 FOR  DO  QUIT:(IEN'>0)
        . . . NEW Ingred,value,dose
        . . . SET value=$GET(Array("POSS MATCH",ClassName,TMGTradeName,IEN))
        . . . SET Ingred=$GET(Array("POSS MATCH",ClassName,TMGTradeName,IEN,"INGRED"))
        . . . IF Ingred="" do
        . . . . SET Ingred=$$GET1^DIQ(22706.9,IEN,.08)
        . . . . SET Array("POSS MATCH",ClassName,TMGTradeName,IEN,"INGRED")=Ingred
        . . . IF Ingred="" do
        . . . . WRITE "Couldn't find an ingredient name for file 22706.9, IEN=",IEN,!
        . . . . SET Ingred="?"
        . . . IF Ingred'="" do
        . . . . SET IngredArray(ClassName,Ingred,IEN)=value
        . . . . SET $PIECE(IngredArray(ClassName,Ingred,IEN),"^",4)=TMGTradeName
        . . . SET IEN=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName,IEN))
        . . SET TMGTradeName=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName))
        . SET ClassName=$ORDER(Array("POSS MATCH",ClassName))


        ;"Now display IngredArray
        ;"      IngredArray format:
        ;"              IngredArray(ClassName,Ingred,IEN)=ClassIEN^ClassCode^DrugDose^TradeName
        ;"              IngredArray(ClassName,Ingred,IEN)=ClassIEN^ClassCode^DrugDose^TradeName
        SET LastClass=$ORDER(IngredArray(""),-1)
        SET ClassName=$ORDER(IngredArray(""))
        IF ClassName'="" FOR  DO  QUIT:(ClassName="")
        . WRITE !,"CLASS: ",ClassName,!
        . NEW IngredName
        . NEW tempCount SET tempCount=0
        . SET IngredName=$ORDER(IngredArray(ClassName,""))
        . IF (CompactMode=1)&(ClassName'=LastClass) SET IngredName=""
        . IF IngredName'="" FOR  DO  QUIT:(IngredName="")
        . . NEW IEN,ClassIEN
        . . SET IEN=$ORDER(IngredArray(ClassName,IngredName,""))
        . . IF IEN>0 FOR  DO  QUIT:(IEN'>0)
        . . . NEW value,dose,TMGTradeName
        . . . SET value=$GET(IngredArray(ClassName,IngredName,IEN))
        . . . SET ClassIEN=$PIECE(value,"^",1)
        . . . SET dose=$PIECE(value,"^",3)
        . . . SET TMGTradeName=$PIECE(value,"^",4)
        . . . WRITE count,".    ",IngredName," ",dose
        . . . IF ShowBoth WRITE " (#",IEN,")"
        . . . WRITE !
        . . . SET tempCount=tempCount+1
        . . . IF (ShowBoth)&(TMGTradeName'="") WRITE "           (",TMGTradeName,")",!
        . . . SET Answers(count)=IEN_"^"_TMGTradeName_"^"_ClassIEN_"^"_ClassName
        . . . SET count=count+1
        . . . SET someShown=1
        . . . SET IEN=$ORDER(IngredArray(ClassName,IngredName,IEN))
        . . SET IngredName=$ORDER(IngredArrayArray(ClassName,IngredName))
        . IF tempCount>20 do
        . . WRITE "END CLASS: ",ClassName,!
        . . SET tempCount=0
        . SET ClassName=$ORDER(IngredArray(ClassName))

        GOTO SL2

SL1     ;"Display sorted by tradename
        SET LastClass=$ORDER(Array("POSS MATCH",""),-1)
        SET ClassName=$ORDER(Array("POSS MATCH",""))
        IF ClassName'="" FOR  DO  QUIT:(ClassName="")
        . WRITE !,"CLASS: ",ClassName,!
        . NEW TMGTradeName
        . NEW tempCount SET tempCount=0
        . SET TMGTradeName=$ORDER(Array("POSS MATCH",ClassName,""))
        . IF (CompactMode=1)&(ClassName'=LastClass) SET TMGTradeName=""
        . IF TMGTradeName'="" FOR  DO  QUIT:(TMGTradeName="")
        . . NEW IEN,ClassIEN
        . . SET IEN=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName,""))
        . . IF IEN>0 FOR  DO  QUIT:(IEN'>0)
        . . . NEW value SET value=$GET(Array("POSS MATCH",ClassName,TMGTradeName,IEN))
        . . . SET ClassIEN=$PIECE(value,"^",1)
        . . . NEW dose SET dose=$PIECE(value,"^",3)
        . . . ;"WRITE count,".   (",IEN,") ",TMGTradeName," ",dose,!
        . . . WRITE count,".    ",TMGTradeName," ",dose
        . . . IF ShowBoth WRITE " (#",IEN,")"
        . . . WRITE !
        . . . SET tempCount=tempCount+1
        . . . IF ShowBoth do
        . . . . NEW Ingred
        . . . . SET Ingred=$GET(Array("POSS MATCH",ClassName,TMGTradeName,IEN,"INGRED"))
        . . . . IF Ingred="" do
        . . . . . SET Ingred=$$GET1^DIQ(22706.9,IEN,.08)
        . . . . . SET Array("POSS MATCH",ClassName,TMGTradeName,IEN,"INGRED")=Ingred
        . . . . IF Ingred'="" WRITE "           (Same class as: ",Ingred,")",!
        . . . SET Answers(count)=IEN_"^"_TMGTradeName_"^"_ClassIEN_"^"_ClassName
        . . . SET count=count+1
        . . . SET someShown=1
        . . . SET IEN=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName,IEN))
        . . SET TMGTradeName=$ORDER(Array("POSS MATCH",ClassName,TMGTradeName))
        . IF tempCount>20 do
        . . WRITE "END CLASS: ",ClassName,!
        . . SET tempCount=0
        . SET ClassName=$ORDER(Array("POSS MATCH",ClassName))

SL2     IF 'someShown WRITE "  --- (List is Empty) ---",!

SLDone  QUIT


DoSetClass(Array,Answers,List)
        ;"Purpose: To add ClassIEN to field .09 (VA DRUG CLASS) in file TMG FDA IMPORT COMPILED
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"                Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"Results: none

        NEW DrugIEN,DrugName,ClassIEN,ClassName

        NEW i
        SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . SET DrugIEN=+$PIECE($GET(Answers(i)),"^",1)
        . SET DrugName=$PIECE($GET(Answers(i)),"^",2)
        . SET ClassIEN=+$PIECE($GET(Answers(i)),"^",3)
        . SET ClassName=$PIECE($GET(Answers(i)),"^",4)
        . IF (DrugIEN'=0)&(ClassIEN'=0) do
        . . NEW UndoCt SET UndoCt=+$GET(Array("UNDO","COUNT"))+1
        . . NEW OldValue SET OldValue=$PIECE($GET(^TMG(22706.9,DrugIEN,1)),"^",5)
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET Array("UNDO",UndoCt,1)="set $PIECE(^TMG(22706.9,"_DrugIEN_",1),""^"",5)="_OldValue
        . . SET $PIECE(^TMG(22706.9,DrugIEN,1),"^",5)=ClassIEN ;"I own file, and there are no XREF, so OK to direct set.
        . . KILL Answers(i)
        . . SET OldValue=$GET(Array("POSS MATCH",ClassName,DrugName,DrugIEN))
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET Array("UNDO",UndoCt,2)="set Array(""POSS MATCH"","""_ClassName_""","""_DrugName_""","_DrugIEN_")="_OldValue
        . . SET Array("UNDO","COUNT")=UndoCt
        . . KILL Array("POSS MATCH",ClassName,DrugName,DrugIEN)
        . SET i=$ORDER(List(i))

        QUIT


ShowInfo(Array,Answers,Num)
        ;"Purpose: to show more about the specified drug
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"       Num -- entry number to show

        NEW DrugIEN SET DrugIEN=+$PIECE($GET(Answers(Num)),"^",1)
        IF DrugIEN=0 QUIT
        DO DumpRec^TMGDEBUG(22706.9,DrugIEN)
        QUIT


DoRemove(Array,Answers,List,ByTradeName,FromECode,Cancelled)
        ;"Purpose: To remove entries from Empty-class Array
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"       Cancelled -- OPTIONAL, PASS BY REFERENCE, will be SET to 1 IF user cancelled.
        ;"Results: none

        SET ByTradeName=$GET(ByTradeName,0)
        SET Cancelled=1 ;"default is cancellation

        WRITE !,"Remove these drugs perminantly (i.e. don't add to VistA database)?",!
        DO Disp2List(.Answers,.List,.ByTradeName)

        WRITE "Remove these drugs perminantly (i.e. don't add to VistA database)"
        NEW % SET %=1 DO YN^DICN WRITE !
        NEW SetSkipFlag SET SetSkipFlag=(%=1)

        IF %=2 do
        . WRITE "Temporarily remove drugs from category listing"
        . DO YN^DICN WRITE !
        IF %=2 GOTO DERMDone

        NEW UndoArray
        NEW DrugIEN,DrugName,TradeName
        NEW i SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . SET DrugIEN=+$PIECE($GET(Answers(i)),"^",1)
        . NEW UndoCt SET UndoCt=$ORDER(UndoArray(i,""),-1)+1
        . IF (DrugIEN>0)&(SetSkipFlag) do
        . . NEW OldValue SET OldValue=$PIECE(^TMG(22706.9,DrugIEN,1),"^",4)
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET UndoArray(i,UndoCt)="set $PIECE(^TMG(22706.9,"_DrugIEN_",1),""^"",4)="_OldValue
        . . SET $PIECE(^TMG(22706.9,DrugIEN,1),"^",4)=1 ;"I own file, and there are no XREF, so OK to direct set.
        . IF (SetSkipFlag=0)&(FromECode=0) do
        . . SET UndoArray(i,UndoCt)="kill Array("_DrugIEN_",""?"")"
        . . SET UndoArray(i,UndoCt+1)="kill Array(""?"","_DrugIEN_")"
        . . SET Array(DrugIEN,"?")=""
        . . SET Array("?",DrugIEN)=""
        . SET i=$ORDER(List(i))

        DO ClrAnswers(.Array,.Answers,.List,.FromECode,.UndoArray)

        NEW UndoCt SET UndoCt=$GET(Array("UNDO","COUNT"))
        SET i=""
        FOR  SET i=$ORDER(UndoArray(i)) QUIT:(i="")  do
        . MERGE Array("UNDO",UndoCt)=UndoArray(i)
        . SET UndoCt=UndoCt+1
        SET Array("UNDO","COUNT")=UndoCt

        SET Cancelled=0 ;"set success here

DERMDone
        QUIT


DoLookup(Array,Answers,Classes,List,FromECode,Cancelled)
        ;"Purpose: To Manually lookup class for entries
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       Classes -- PASS BY REFERENCE, an array containing classes
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"       Cancelled -- OPTIONAL, PASS BY REFERENCE, will be SET to 1 IF user cancelled.
        ;"Results: none

        SET Cancelled=1 ;"default to cancellation

        NEW UsrClassIEN
        SET UsrClassIEN=$$SelectClass(.Classes)
        IF UsrClassIEN=0 GOTO DLUDone

        NEW ClassName SET ClassName=$$GET1^DIQ(50.605,UsrClassIEN,1)

        IF $$VerifyWrite(ClassName,.Answers,.List)=0 GOTO DLUDone

        DO WriteClass(UsrClassIEN,.Array,.Answers,.List,.FromECode)
        SET Cancelled=0 ;"set success here

DLUDone
        QUIT


WriteClass(ClassIEN,Array,Answers,List,FromECode)
        ;"Purpose: To DO the actual setting of the class
        ;"Input: ClassIEN -- the IEN of the class to set.
        ;"       Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"              Note: Only needed to clear out entries that are no longer needed.
        ;"            OR, IF FromECode=1, then this Array format is used:
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"            OR, IF FromECode=1, then this format is used:
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"Output: Data will be altered in file 22706.9
        ;"      Array will be modified: Undo information will be added:
        ;"              Array("UNDO","COUNT")=number of undo steps avail
        ;"              Array("UNDO",Event#,part#)=code to be eXecuted to reverse step.
        ;"Results: none

        NEW DrugIEN,DrugName,ClassName
        NEW UndoArray SET UndoArray("")=""
        NEW i SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . SET DrugIEN=+$PIECE($GET(Answers(i)),"^",1)
        . IF DrugIEN=0 GOTO WC1
        . NEW UndoCt SET UndoCt=$ORDER(UndoArray(i,""))+1
        . NEW OldValue SET OldValue=$PIECE(^TMG(22706.9,DrugIEN,1),"^",5)
        . IF OldValue="" SET OldValue=""""""
        . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . SET UndoArray(i,UndoCt)="set $PIECE(^TMG(22706.9,"_DrugIEN_",1),""^"",5)="_OldValue
        . SET $PIECE(^TMG(22706.9,DrugIEN,1),"^",5)=ClassIEN ;"I own file, and there are no XREF, so OK to direct set.
WC1     . SET i=$ORDER(List(i))

        DO ClrAnswers(.Array,.Answers,.List,.FromECode,.UndoArray)

        SET i=$ORDER(UndoArray(""))
        NEW UndoCt SET UndoCt=$GET(Array("UNDO","COUNT"))
        IF i'="" FOR  DO  QUIT:(i="")
        . MERGE Array("UNDO",UndoCt)=UndoArray(i)
        . SET UndoCt=UndoCt+1
        . SET i=$ORDER(UndoArray(i))
        SET Array("UNDO","COUNT")=UndoCt

WCDone
        QUIT


ClrAnswers(Array,Answers,List,FromECode,UndoArray)
        ;"Purpose: To remove entries from Array and Answers array.
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"              Note: Only needed to clear out entries that are no longer needed.
        ;"            OR, IF FromECode=1, then this Array format is used:
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"            OR, IF FromECode=1, then this format is used:
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"       UndoArray -- PASS BY REFERENCE -- an array to be filled with undo info
        ;"              format as follows:
        ;"                      Array(list#,step#)=CodeToBeExecuted
        ;"                      Array(list#,step#)=CodeToBeExecuted
        ;"Output: Entries will be removed from list.

        ;"Results: none

        NEW DrugIEN,DrugName,ClassName
        NEW i
        SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . SET DrugIEN=+$PIECE($GET(Answers(i)),"^",1)
        . IF DrugIEN=0 GOTO CA1
        . NEW UndoCt SET UndoCt=$ORDER(UndoArray(i,""))+1
        . IF $GET(FromECode)=1 do
        . . NEW GenericName,TradeName
        . . SET GenericName=$PIECE($GET(Answers(i)),"^",2)
        . . SET TradeName=$PIECE($GET(Answers(i)),"^",3)
        . . ;"save info for possible undo in the future
        . . NEW OldValue SET OldValue=$GET(Array("GENERIC NAME",GenericName,DrugIEN))
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET UndoArray(i,UndoCt)="set Array(""GENERIC NAME"","_GenericName_","_DrugIEN_")="_OldValue
        . . SET UndoCt=UndoCt+1
        . . NEW OldValue SET OldValue=$GET(Array("TRADE NAME",TradeName,DrugIEN))
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET UndoArray(i,UndoCt)="set Array(""TRADE NAME"","_TradeName_","_DrugIEN_")="_OldValue
        . . ;"Now DO real removal
        . . KILL Array("GENERIC NAME",GenericName,DrugIEN)
        . . KILL Array("TRADE NAME",TradeName,DrugIEN)
        . ELSE  do
        . . SET DrugName=$PIECE($GET(Answers(i)),"^",2)
        . . SET ClassName=$PIECE($GET(Answers(i)),"^",4)
        . . NEW OldValue SET OldValue=$GET(Array("POSS MATCH",ClassName,DrugName,DrugIEN))
        . . IF OldValue="" SET OldValue=""""""
        . . IF +OldValue'=OldValue SET OldValue=""""_OldValue_""""
        . . SET UndoArray(i,UndoCt)="set Array(""POSS MATCH"","_ClassName_","_DrugName_","_DrugIEN_")="_OldValue
        . . KILL Array("POSS MATCH",ClassName,DrugName,DrugIEN)
        . KILL Answers(i)   ;"I'm not sure how to undo this part.  I think it's regenerated with each display of list
CA1     . SET i=$ORDER(List(i))

        QUIT


VerifyWrite(ClassName,Answers,List,ByTradeName,ShowBoth)
        ;"Purpose: To display list of entries and ask user IF class SET is desired
        ;"Input: ClassName -- the name of the VA DRUG CLASS
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, IF value=1 then trade name and generic names both shown.
        ;"Result: 1 IF writing is OK, other 0

        WRITE !,"DRUG CLASS: ",ClassName,!
        WRITE "Use this for drug(s) below?: ",!
        DO Disp2List(.Answers,.List,.ByTradeName,.ShowBoth)
        WRITE "Use DRUG CLASS [",ClassName,"] for drug(s) above"
        NEW % SET %=1 DO YN^DICN WRITE !

        QUIT (%=1)


Disp2List(Answers,List,ByTradeName,ShowBoth)
        ;"Purpose: An interfact to DisplayList function, to allow easier input.
        ;"Input: Answers -- PASS BY REFERENCE, an array linking display number to IENS. See DisplayList
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process. See DisplayList
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, IF value=1 then trade name and generic names both shown.

        SET ByTradeName=$GET(ByTradeName,0)
        SET ShowBoth=$GET(ShowBoth,0)
        NEW part,alsoPart
        SET alsoPart=0

        IF ByTradeName=1 do
        . SET part=3 ;"i.e. show TradeName
        . IF ShowBoth SET alsoPart=2
        ELSE  do
        . SET part=2 ;"i.e. show GenericName
        . IF ShowBoth SET alsoPart=3

        DO DisplayList(.Answers,.List,part,alsoPart)

        QUIT

DisplayList(Answers,List,Piece,AlsoPiece)
        ;"Purpose: To display list of entries
        ;"Input: Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"            OR, Array as created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName

        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       Piece -- OPTIONAL, default=2.  The piece number of Answer value to show.
        ;"       AlsoPiece -- OPTIONAL, default="", If specified, then this piece of the Answer
        ;"                      will also be shown in paretheses under the original answer.
        ;"Result: none

        NEW someShown SET someShown=0
        SET Piece=$GET(Piece,2)
        NEW i
        SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . WRITE "  ",i,".  ",$PIECE($GET(Answers(i)),"^",Piece),!
        . SET someShown=1
        . IF +$GET(AlsoPiece)>0 do
        . . WRITE "           (",$PIECE($GET(Answers(i)),"^",AlsoPiece),")",!
        . SET i=$ORDER(List(i))

        IF someShown=0 WRITE "   -- List is EMPTY -- ",!
        WRITE "--------------------------------------",!
        QUIT


SimilarPick(Array,Answers,List,FromECode,Cancelled)
        ;"Purpose: To allow user to specify that a SET of numbers should use the same class as
        ;"      another entry.
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"Results: none

        SET Cancelled=1 ;"default to cancellation

        NEW input
        read "Which entry has the CORRECT CLASS? ",input:$GET(DTIME,3600),!
        IF +input'=input GOTO SPDone

        NEW SimClName SET SimClName=$PIECE($GET(Answers(input)),"^",4)
        NEW SimClIEN SET SimClIEN=+$PIECE($GET(Answers(input)),"^",3)

        IF $$VerifyWrite(SimClName,.Answers,.List)=1 GOTO SPDone
        DO WriteClass(SimClIEN,.Array,.Answers,.List,.FromECode)
        SET Cancelled=0 ;"signal success

SPDone
        QUIT



FindPick(Array,Answers,List,FromECode,Cancelled)
        ;"Purpose: To allow user to look up a drug already in the VistA database, and use the
        ;"              VA DRUG CLASS assigned to that drug.
        ;"      another entry.
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode^DrugDose
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowList
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"              Answer(num)=DrugIEN^DrugName^ClassIEN^ClassName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses)
        ;"       Cancelled -- OPTIONAL, PASS BY REFERENCE, will be SET to 1 IF user cancelled.
        ;"Results: none

        SET Cancelled=1  ;"default is cancellation
        WRITE "Classify drug by finding ANOTHER drug in the SAME CLASS",!
FPLoop
        NEW DIC,X,Y
        SET DIC=50.68
        SET DIC(0)="AEQM"
        SET DIC("A")="Enter DRUG NAME OF EXAMPLE with desired CLASS// "
        DO ^DIC WRITE !
        IF +Y'>0 DO  GOTO FPDone
        . WRITE "No usable value found.",!
        . DO PRESS2GO^TMGUSRI2

        NEW SimClName,SimClIEN
        SET SimClIEN=$$GET1^DIQ(50.68,+Y,15,"I")  ;"50.68=VA PRODUCT file
        IF SimClIEN'>0 DO  GOTO FPDone
        . WRITE "No usable value found.",!
        . DO PRESS2GO^TMGUSRI2
        SET SimClName=$$GET1^DIQ(50.605,SimClIEN,1)  ;"50.605 is VA DRUG CLASS

        NEW IsOK SET IsOK=$$VerifyWrite(SimClName,.Answers,.List)
        NEW TryAgain SET TryAgain=0
        IF IsOK=1 do
        . DO WriteClass(SimClIEN,.Array,.Answers,.List,.FromECode)
        . SET Cancelled=0  ;"set success here
        ELSE  do
        . WRITE "Pick another DRUG CLASS"
        . NEW % SET %=1 DO YN^DICN WRITE !
        . SET TryAgain=(%=1)
        IF TryAgain=1 GOTO FPLoop

FPDone
        QUIT

 ;"=======================================================================
 ;"=======================================================================

HandleEmptyClasses
        ;"Purpose: To allow classification of all unclassified drugs (ones with not potential
        ;"      match found in VistA database as a starting point)

        NEW array
        WRITE "Gathering information...",!
        DO GatherEmpties(.array)
        DO ClassEClasses(.array)

        QUIT



GatherEmpties(Array)
        ;"Purpose: To scan through all records in TMG FDA IMPORT COMPILED, and create an array of
        ;"           possible entries for VA DRUG CLASS, from ones that have NO possible VA PRODUCT MATCH
        ;"Input: Array -- PASS BY REFERENCE, and OUT PARAMETER
        ;"Output: Array will be filled as follows:
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"Results: none
        ;"Note: IF SKIP THIS RECORD field is set, then record will be skipped.
        ;"      Also, IF there is already an antry for the VA DRUG CLASS field, then will be skipped.

        NEW Itr,IEN
        SET IEN=$$ItrInit^TMGITR(22706.9,.Itr)
        DO PrepProgress^TMGITR(.Itr,20,0,"IEN")
        IF IEN'="" FOR  DO  QUIT:($$ItrNext^TMGITR(.Itr,.IEN)'>0)
        . NEW tempIEN SET IEN=IEN
        . NEW skipFlag SET skipFlag=+$PIECE($GET(^TMG(22706.9,IEN,1)),"^",4)
        . NEW PriorClass SET PriorClass=+$PIECE($GET(^TMG(22706.9,IEN,1)),"^",5)
        . ;"WRITE IEN," --> ",PriorClass,!
        . IF skipFlag=1 QUIT
        . IF PriorClass>0 QUIT
        . NEW TMGGeneric SET TMGGeneric=$PIECE($GET(^TMG(22706.9,IEN,0)),"^",6) ;"GENERIC NAME
        . NEW TradeName SET TradeName=$PIECE($GET(^TMG(22706.9,IEN,0)),"^",4) ;"TRADENAME
        . IF TMGGeneric'="" SET Array("GENERIC NAME",TMGGeneric,IEN)=""
        . IF TradeName'="" SET Array("TRADE NAME",TradeName,IEN)=""
        . IF (TMGGeneric'="")&(TradeName'="") do
        . . SET Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        . . SET Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        DO ProgressDone^TMGITR(.Itr)

        QUIT

ShowEList(Array,Answers,CompactMode,ByTradeName,ShowBoth)
        ;"Purpose: To display the list of 'Empty' classes generated by GatherEmpties
        ;"Input: Array -- the array containing the data
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE.  An OUT PARAMATER.
        ;"              Array will receive display numbers with IENs
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       CompactMode -- OPTIONAL, IF value=1, then only the LAST drug class will be
        ;"              expanded (a potientially long list).  Others will just show heading.
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, IF value=1 then both Generic and TradeName shown.
        ;"Output: List is shown, and the Answers array is established and passed back.
        ;"Results: none.

        NEW someShown SET someShown=0
        NEW count SET count=1
        KILL Answers
        SET CompactMode=$GET(CompactMode,0)
        SET ByTradeName=$GET(ByTradeName,0)
        SET ShowBoth=$GET(ShowBoth,0)
        NEW IEN
        NEW GenericName,TradeName,DrugName
        NEW CountLimit SET CountLimit=99999
        IF CompactMode=1 do
        . IF ShowBoth=1 SET CountLimit=8
        . ELSE  SET CountLimit=10
        NEW Label SET Label="GENERIC NAME"
        IF ByTradeName=1 SET Label="TRADE NAME"

        SET DrugName=$ORDER(Array(Label,""))
        IF DrugName'="" FOR  DO  QUIT:(DrugName="")!(count>CountLimit)
        . SET IEN=$ORDER(Array(Label,DrugName,""))
        . IF IEN'="" FOR  DO  QUIT:(IEN="")!(count>CountLimit)
        . . WRITE count,".  ",DrugName,!
        . . NEW OtherName
        . . IF ByTradeName=0 do
        . . . SET GenericName=DrugName
        . . . SET TradeName=$GET(Array("LINK GENERIC TO TRADE",GenericName))
        . . . SET OtherName=TradeName
        . . ELSE  do
        . . . SET TradeName=DrugName
        . . . SET GenericName=$GET(Array("LINK TRADE TO GENERIC",TradeName))
        . . . SET OtherName=GenericName
        . . IF ShowBoth=1 WRITE "       (",OtherName,")",!
        . . SET Answers(count)=IEN_"^"_GenericName_"^"_TradeName
        . . SET count=count+1
        . . SET IEN=$ORDER(Array(Label,DrugName,IEN))
        . SET DrugName=$ORDER(Array(Label,DrugName))
        . SET someShown=1

        IF 'someShown WRITE "  --- (List is Empty) ---",!
        QUIT



ClassEClasses(Array)
        ;"Purpose: To allow user to classify drugs with empty (none) VA Drug Class
        ;"Input: Array -- PASS BY REFERENCE  the array generated by GatherEmpties
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"Output: Database is changed, by adding data to field .09 (VA DRUG CLASS)
        ;"Results: none

        NEW done SET done=0
        NEW input SET input="R"
        NEW Answers
        NEW CompactMode SET CompactMode=1 ;" (list display mode: 1=compact,  0=verb
        NEW ShowBoth SET ShowBoth=0
        NEW ByTrade SET ByTrade=1
        NEW EntryList,EntryS

        NEW Classes
        DO GetClasses(.Classes)
        DO KillIntro(.Classes)

        FOR  DO  QUIT:(done=1)
        . IF input="R" do
        . . WRITE !!
        . . WRITE "--------------------------------------------------",!
        . . WRITE "Pick drug(s) to specify a DRUG CLASS",!
        . . WRITE "--------------------------------------------------",!
        . . DO ShowEList(.Array,.Answers,CompactMode,ByTrade,ShowBoth)
        . . WRITE "--------------------------------------------------",!
        . . WRITE "Pick drug(s) to specify a DRUG CLASS",!
        . WRITE "--------------------------------------------------",!
        . WRITE " R=refresh, ?=instructions, X=remove from list, I=info, F=find",!
        . WRITE " G=Guess, L Lookup",!
        . WRITE " C=set Compact ",$SELECT((CompactMode=1):"OFF",1:"ON"),", "
        . WRITE "T=set TradeName ",$SELECT((ByTrade=1):"OFF",1:"ON"),", B=set Both names ",$SELECT((ShowBoth=1):"OFF",1:"ON")
        . WRITE ", ",!
        . WRITE " # or #-# or #,#-#,# etc., S=SET tools,  ^ done, ",!
        . IF $GET(EntryS)'="" WRITE " Current SET #'s: ",EntryS,",  D to delete SET",!
        . WRITE "Enter number(s) to LOOKUP drug class (or codes listed above): R//"
        . read input:$GET(DTIME,3600),!
        . IF input="" SET input="R"
        . SET input=$$UP^XLFSTR(input)
        . IF input="^" SET done=1 QUIT
        . ELSE  IF (input="?") DO  ;"---- instructions
        . . ;"do ShowInstructions()
        . . SET input="R"
        . ELSE  IF input="I" DO  ;" ---- drug info
        . . read "...Enter number of drug to get info about: ^//",input,!
        . . DO ShowInfo(.Array,.Answers,+input)
        . . SET input="R"
        . ELSE  IF input="C" DO  ;"--- toggle compact mode
        . . SET CompactMode='CompactMode
        . . SET input="R"
        . ELSE  IF input="T" DO ;"---- toggle display by tradename
        . . SET ByTrade='ByTrade
        . . SET input="R"
        . ELSE  IF input="B" DO ;" ---- toggle display of both names.
        . . SET ShowBoth='ShowBoth
        . . SET input="R"
        . ELSE  IF input="D" DO  ;"---- delete set
        . . KILL EntryList,EntryS
        . . SET input="R"
        . ELSE  IF input="X" DO   ;" ---- delete entries
        . . NEW valid SET valid=1
        . . IF $GET(EntryS)="" DO  QUIT:(valid=0)
        . . . read "...Enter number(s) to REMOVE from list: ^// ",input,!
        . . . SET valid=$$MkMultList^TMGMISC(input,.EntryList)
        . . . IF valid SET EntryS=input
        . . IF CompactMode=1 SET input="R"
        . . NEW Cancelled
        . . DO DoRemove(.Array,.Answers,.EntryList,ByTrade,1,.Cancelled)
        . . IF Cancelled=0 KILL EntryList,EntryS
        . ELSE  IF input="S" DO   ;"---- SET tools
        . . DO DoSetTools(.Array,.Answers,.EntryList,.EntryS,.ByTrade,.ShowBoth)
        . . IF CompactMode=1 SET input="R"
        . ELSE  IF input="F" DO  ;" ---- find drugs
        . . NEW valid SET valid=1
        . . IF $GET(EntryS)="" DO  QUIT:(valid=0)
EFL     . . . read "...Enter number(s) to classify by FINDING a similar drug: (? help) ^// ",input,!
        . . . IF input="?" DO FindHelp() GOTO EFL
        . . . SET valid=$$MkMultList^TMGMISC(input,.EntryList)
        . . . IF valid SET EntryS=input
        . . IF CompactMode=1 SET input="R"
        . . NEW Cancelled
        . . DO FindPick(.Array,.Answers,.EntryList,1,.Cancelled)
        . . IF Cancelled=0 KILL EntryList,EntryS
        . ELSE  IF (input="L")!(+input>0) DO  ;" ----- lookup drugs
        . . NEW valid SET valid=1
        . . IF $GET(EntryS)="" DO  QUIT:(valid=0)
        . . . IF input="L" read "...Enter number(s) to LOOKUP from list: ^// ",input,!
        . . . SET valid=$$MkMultList^TMGMISC(input,.EntryList)
        . . . IF valid SET EntryS=input
        . . IF CompactMode=1 SET input="R"
        . . NEW Cancelled
        . . DO DoLookup(.Array,.Answers,.Classes,.EntryList,1,.Cancelled)
        . . IF Cancelled=0 KILL EntryList,EntryS
        . ELSE  IF input="G" DO  ;" ---- guess drugs
        . . NEW valid SET valid=1
        . . IF $GET(EntryS)="" DO  QUIT:(valid=0)
EGL     . . . read "...Enter number(s) to classify by GUESSING: (? help) ^// ",input,!
        . . . IF input="?" DO FindHelp() GOTO EFL
        . . . SET valid=$$MkMultList^TMGMISC(input,.EntryList)
        . . . IF valid SET EntryS=input
        . . IF CompactMode=1 SET input="R"
        . . NEW Cancelled
        . . DO DoEGuess(.Array,.Answers,.EntryList,ByTrade,ShowBoth,.Cancelled,1,.Classes)
        . . IF Cancelled=0 KILL EntryList,EntryS
        . ELSE  IF input'="R" DO  ;"---- accept numeric input etc.
        . . IF $$MkMultList^TMGMISC(input,.EntryList)=0 QUIT
        . . SET EntryS=input
        . . IF CompactMode=1 SET input="R"

        QUIT


DoGuess(Array,Answers,EntryList,Cancelled,Classes)
        ;"Purpose: A wrapper for DoEGuess, with some automatically provided paremeters
        DO DoEGuess(.Array,.Answers,.EntryList,0,0,.Cancelled,0,.Classes)
        QUIT

DoEGuess(Array,Answers,List,ByTradeName,ShowBoth,Cancelled,FromECode,Classes)
        ;"Purpose: To guess as classification for entries.
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by GatherEmpties(Array)
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, IF value=1 then trade name and generic names both shown.
        ;"       Cancelled -- OPTIONAL, PASS BY REFERENCE, will be SET to 1 IF user cancelled.
        ;"       FromECode -- OPTIONAL, IF value=1, then code is handled as IF called from the 'empty'
        ;"                      code modules (ie HandleEmptyClasses).  Default=0
        ;"       Classes -- PASS BY REFERENCE -- An array holding classes.
        ;"Results: none

        SET FromECode=$GET(FromECode,0)
        SET Cancelled=1 ;"default to cancellation

        NEW Results
        WRITE "Searching for guesses...",$CHAR(10)

        DO GGuessList(.Array,.Answers,.List,.Results)
        ;"              Results(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results("ALL CLASSES",ClassIEN)=ClassIEN_"^"_ClassCode_"^"_ClassName
        ;"              Results("ALL CLASSES",ClassIEN,matchName,vapIEN)=""

        NEW showExamples SET showExamples=1

DEGL0   WRITE !,"GUESSES of class for these drugs: ",!
        DO Disp2List(.Answers,.List,.ByTradeName,.ShowBoth)

        NEW subAnswers
        NEW someShown SET someShown=0
        NEW count SET count=0
        NEW classIEN SET classIEN=""
        FOR  SET classIEN=+$ORDER(Results("ALL CLASSES",classIEN)) QUIT:(classIEN'>0)  do
        . SET count=count+1
        . NEW node SET node=$GET(Results("ALL CLASSES",classIEN))
        . WRITE "  ",count,". CLASS: ",$PIECE(node,"^",3),!
        . SET someShown=1
        . SET subAnswers(count)=node
        . NEW matchName SET matchName=""
        . NEW temp SET temp=0
        . FOR  SET matchName=$ORDER(Results("ALL CLASSES",classIEN,matchName)) QUIT:(matchName="")!(temp>5)  do
        . . NEW vapIEN SET vapIEN=""
        . . FOR  SET vapIEN=+$ORDER(Results("ALL CLASSES",classIEN,matchName,vapIEN)) QUIT:(vapIEN'>0)!(temp>5)  do
        . . . IF showExamples=0 QUIT
        . . . WRITE "            e.g. ",matchName," (",vapIEN,")",!
        . . . SET temp=temp+1

        IF someShown=0 DO  GOTO DEGDone
        . WRITE "  -- (None Suggestions found) -- ",!!
        . NEW temp read "Press ENTER to continue.",temp,!

        NEW input,UsrClassIEN,className
        NEW defInput SET defInput="^"
        IF count=1 SET defInput=1
        NEW fixing
DEGL1
        SET fixing=0
        WRITE "[Enter F to fix (change) the class of a drug listed above.]",!
        WRITE "[Enter E to toggle Examples ON/OFF]",!
        WRITE "Enter number of CLASS to select (^ to abort): "_defInput_"// "
        read input:$GET(DTIME,3600),!
        IF input="" SET input=defInput
        SET input=$$UP^XLFSTR(input)
        IF input="^" GOTO DEGDone
        IF input="E" DO  GOTO DEGL0
        . SET showExamples='showExamples
        IF input="F" DO  GOTO:(input="^") DEGL1
        . SET fixing=1
        . WRITE !,"Enter number of CLASS containing erroneously classified drug (^ to abort): "_defInput_"// "
        . read input:$GET(DTIME,3600) WRITE !
        . IF input="" SET input=defInput
        SET UsrClassIEN=+$GET(subAnswers(input))
        IF UsrClassIEN'>0 GOTO DEGL1
        IF fixing=1 DO  GOTO DEGL0
        . DO FixBadClass(.Results,UsrClassIEN,.Classes)
        SET className=$PIECE($GET(subAnswers(input)),"^",3)
        WRITE !!
        IF $$VerifyWrite(className,.Answers,.List,ByTradeName,ShowBoth)=0 GOTO DEGDone
        DO WriteClass(UsrClassIEN,.Array,.Answers,.List,FromECode)
        SET Cancelled=0 ;"set success here.
DEGDone
        QUIT


FixBadClass(GuessArray,UsrClassIEN,Classes)
        ;"Purpose: If guessing reveals that an existing drug has been misclassified, then
        ;"         this function will allow correction of that drug (50.68 entry)
        ;"Input: GuessArray -- PASS BY REFERENCE.  Format:
        ;"              GuessArray(Entry Number,"NAME",VASimilarDrugName)=ClassIEN^ClassCode^ClassName^vapIEN
        ;"              GuessArray(Entry Number,"CLASS",ClassIEN)=ClassIEN^ClassCode^ClassName
        ;"              GuessArray("ALL CLASSES",classIEN)=classIEN_"^"_classCode_"^"_className
        ;"              GuessArray("ALL CLASSES",classIEN,matchName)=vapIEN

        ;"              GuessArray(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              GuessArray(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              GuessArray("ALL CLASSES",ClassIEN)=ClassIEN_"^"_ClassCode_"^"_ClassName
        ;"              GuessArray("ALL CLASSES",ClassIEN,matchName,vapIEN)=""


        ;"       UsrClassIEN -- The class containing the incorrectly classified drug
        ;"       Classes -- PASS BY REFERENCE.  An array holding classes.

        IF $GET(UsrClassIEN)="" GOTO FBCDone
        NEW className
        SET className=$PIECE($GET(GuessArray("ALL CLASSES",UsrClassIEN)),"^",3)

        NEW Menu,UsrSlct
        NEW menuNum SET menuNum=0
        NEW matchName SET matchName=""
        NEW lastMatchName,lastvapIEN
        NEW AllArray,IENArray,vapIEN
        SET Menu(0)="Pick Which Drug does NOT belong in class: "_className
        FOR  SET matchName=$ORDER(GuessArray("ALL CLASSES",UsrClassIEN,matchName)) QUIT:(matchName="")  do
        . SET vapIEN=""
        . FOR  SET vapIEN=$ORDER(GuessArray("ALL CLASSES",UsrClassIEN,matchName,vapIEN)) QUIT:(vapIEN="")  do
        . . SET menuNum=menuNum+1
        . . SET Menu(menuNum)=matchName_" (#"_vapIEN_")"_$CHAR(9)_"@^"_vapIEN_"^"_matchName
        . . SET AllArray(vapIEN)=matchName
        . . SET AllArray("NAME",matchName,vapIEN)=""
        . . SET lastMatchName=matchName,lastvapIEN=vapIEN
        IF menuNum>1 do
        . SET menuNum=menuNum+1
        . SET Menu(menuNum)="ALL of the above drugs"_$CHAR(9)_"ALL"
        . IF menuNum'>3 QUIT
        . SET menuNum=menuNum+1
        . SET Menu(menuNum)="OR you may enter #-#, or #,#,#-#,# etc."_$CHAR(9)_"#"

FBCMC1
        IF menuNum>1 do
        . WRITE ! SET UsrSlct=$$MENU^TMGUSRI2(.Menu,"^")  ;"@^vapIEN^matchName
        ELSE  do
        . SET UsrSlct="@^"_lastvapIEN_"^"_lastMatchName

        IF UsrSlct="ALL" do
        . MERGE IENArray=AllArray
        ELSE  IF +UsrSlct>0 do
        . NEW EntryList,Entry
        . IF $$MkMultList^TMGMISC(UsrSlct,.EntryList)>0 do
        . . SET Entry=""
        . . FOR  SET Entry=$ORDER(EntryList(Entry)) QUIT:(Entry="")  do
        . . . NEW vapIEN,vapName,s
        . . . SET s=$PIECE(Menu(Entry),$CHAR(9),2)
        . . . IF s="" QUIT
        . . . SET vapIEN=$PIECE(s,"^",2),vapName=$PIECE(s,"^",3)
        . . . SET IENArray(vapIEN)=vapName
        . . . SET IENArray("NAME",vapIEN)=""
        ELSE  IF $PIECE(UsrSlct,"^",1)="@" do
        . SET IENArray($PIECE(UsrSlct,"^",2))=$PIECE(UsrSlct,"^",3)
        . SET IENArray("NAME",$PIECE(UsrSlct,"^",3),$PIECE(UsrSlct,"^",2))=""
        ELSE  IF UsrSlct="^" GOTO FBCDone
        ELSE  IF UsrSlct=0 SET UsrSlct=""
        ELSE  IF UsrSlct="??" DO  GOTO FBCDone
        . WRITE !,"For some reason, IEN of selected drug couldn't be found.  Sorry.",!
        ELSE  IF menuNum>1 GOTO FBCMC1
        ELSE  GOTO FBCDone

        WRITE "Now pick CORRECT drug class for the chosen drug(s)",!
        DO PRESS2GO^TMGUSRI2
        NEW newClassIEN SET newClassIEN=$$SelectClass(.Classes,0)
        IF newClassIEN=0 GOTO FBCDone
        ;"new className SET className=$$GET1^DIQ(50.605,newClassIEN,1)
        ;"WRITE "Set CLASS for VA PRODUCT entry: "_$PIECE(UsrSlct,"^",2),!
        ;"WRITE "to be: ",className,"?"
        ;"new % SET %=1
        ;"do YN^DICN WRITE !
        ;"if %=-1 GOTO FBCDone

        NEW vapName SET vapName=""
        FOR  SET vapName=$ORDER(IENArray("NAME",vapName)) QUIT:(vapName="")  do
        . NEW entryNum SET entryNum=""
        . ;" GuessArray(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        . FOR  SET entryNum=$ORDER(GuessArray(entryNum)) QUIT:(+entryNum'>0)  do
        . . SET vapIEN=""
        . . FOR  SET vapIEN=$ORDER(GuessArray(entryNum,"NAME",vapName,vapIEN)) QUIT:(vapIEN="")  do
        . . . NEW s SET s=$GET(GuessArray(entryNum,"NAME",vapName,vapIEN))
        . . . IF s="" QUIT
        . . . NEW classIEN SET classIEN=+s
        . . . IF classIEN=newClassIEN QUIT  ;"already at correct class
        . . . SET IENArray(vapIEN)=vapName

        SET vapIEN=""
        FOR  SET vapIEN=$ORDER(IENArray(vapIEN)) QUIT:(+vapIEN'>0)  do
        . NEW TMGFDA,TMGMSG
        . SET TMGFDA(50.68,vapIEN_",",15)=newClassIEN  ;"className
        . DO FILE^DIE("I","TMGFDA","TMGMSG")
        . DO ShowIfDIERR^TMGDEBUG(.TMGMSG)
        . KILL GuessArray("ALL CLASSES",UsrClassIEN,$GET(IENArray(vapIEN),"xx"))

FBCDone
        QUIT

GGuessList(Array,Answers,List,Results)
        ;"Purpose: To gather a guessing list of possible classes for each entry in List
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"       Results -- PASS BY REFERENCE -- and OUT PARAMETER to receive results, as follows:
        ;"              Results(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results("ALL CLASSES",ClassIEN)=ClassIEN_"^"_ClassCode_"^"_ClassName
        ;"              Results("ALL CLASSES",ClassIEN,matchName,vapIEN)=""
        ;"Results: none

        NEW Guesses,GenericName,TradeName
        NEW i
        SET i=$ORDER(List(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . SET GenericName=$PIECE($GET(Answers(i)),"^",2)
        . SET TradeName=$PIECE($GET(Answers(i)),"^",3)
        . SET i=$ORDER(List(i))
        . IF $DATA(Guesses("TRY",TradeName))>0 QUIT
        . SET Guesses("TRY",TradeName)=1
        . NEW name
        . NEW j,p,done SET done=0
        . NEW X,TMGARRAY,TMGMSG
        . for j=$LENGTH(GenericName,"/"):-1:1 do
        . . SET name=$PIECE(GenericName,"/",j)
        . . for p=$LENGTH(name," "):-1:1 DO  QUIT:(done=1)
        . . . NEW TMGSRCH SET TMGSRCH=$PIECE(name," ",1,p)
        . . . DO FIND^DIC(50.68,"","","",TMGSRCH,"*","","","","TMGARRAY","TMGMSG")
        . . . IF +$GET(TMGARRAY("DILIST",0))>0 do
        . . . . MERGE Guesses("POS MATCH",GenericName,TMGSRCH,"NAME")=TMGARRAY("DILIST",1)
        . . . . MERGE Guesses("POS MATCH",GenericName,TMGSRCH,"IEN")=TMGARRAY("DILIST",2)
        . . . . SET done=1
        KILL Guesses("TRY")  ;"temporary use of those items already searched.

        ;"Now convert matching IENs into drug classes.
        SET GenericName=""
        FOR  SET GenericName=$ORDER(Guesses("POS MATCH",GenericName)) QUIT:(GenericName="")  do
        . NEW namePart SET namePart=""
        . FOR  SET namePart=$ORDER(Guesses("POS MATCH",GenericName,namePart)) QUIT:(namePart="")  do
        . . NEW j SET j=0
        . . FOR  SET j=$ORDER(Guesses("POS MATCH",GenericName,namePart,"IEN",j)) QUIT:(j'>0)  do
        . . . NEW vapIEN SET vapIEN=+$GET(Guesses("POS MATCH",GenericName,namePart,"IEN",j))
        . . . IF vapIEN>0 do
        . . . . NEW classIEN,matchName
        . . . . SET classIEN=+$$GET1^DIQ(50.68,vapIEN,15,"I")
        . . . . SET matchName=$$GET1^DIQ(50.68,vapIEN,.01)  ;"was 5 (print name)
        . . . . IF (classIEN'>0)!(matchName="") QUIT
        . . . . SET Guesses("POS MATCH",GenericName,"CLASS",matchName,classIEN,vapIEN)=""

        ;"Now compose results
        SET i=""
        FOR  SET i=$ORDER(List(i)) QUIT:(i="")  do
        . SET GenericName=$PIECE($GET(Answers(i)),"^",2)
        . SET TradeName=$PIECE($GET(Answers(i)),"^",3)
        . NEW matchName SET matchName=""
        . FOR  SET matchName=$ORDER(Guesses("POS MATCH",GenericName,"CLASS",matchName)) QUIT:(matchName="")  do
        . . NEW classIEN SET classIEN=""
        . . FOR  SET classIEN=+$ORDER(Guesses("POS MATCH",GenericName,"CLASS",matchName,classIEN)) QUIT:(classIEN'>0)  do
        . . . NEW classCode,className
        . . . SET classCode=$$GET1^DIQ(50.605,classIEN,.01)
        . . . SET className=$$GET1^DIQ(50.605,classIEN,1)
        . . . NEW vapIEN SET vapIEN=""
        . . . FOR  SET vapIEN=+$ORDER(Guesses("POS MATCH",GenericName,"CLASS",matchName,classIEN,vapIEN)) QUIT:(vapIEN'>0)  do
        . . . . SET Results(i,"NAME",matchName,vapIEN)=classIEN_"^"_classCode_"^"_className_"^"_vapIEN
        . . . . SET Results(i,"CLASS",classIEN,vapIEN)=classIEN_"^"_classCode_"^"_className_"^"_vapIEN
        . . . . SET Results("ALL CLASSES",classIEN)=classIEN_"^"_classCode_"^"_className
        . . . . SET Results("ALL CLASSES",classIEN,matchName,vapIEN)=""

        QUIT



AutoEClassification(Array)
        ;"Purpose: To attempt to automatically classify drugs that have not potential match
        ;"Input: -- Array PASS BY REFERENCE, an OUT PARAMETER.  Prior entries are NOT killed.
        ;"Output: Array will be filled as follows:
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode
        ;"              Array("POSS MATCH",ClassName,TMGTradename,DrugIEN)=ClassIEN^ClassCode
        ;"              Array(DrugIEN,"?")=""
        ;"              Array("?",DrugIEN)=""
        ;"Results: none

        NEW tempArray
        NEW Classes
        NEW Answers
        WRITE "Gathering drugs with no CLASS information and no existing match...",!

        NEW CompactMode SET CompactMode=0 ;" (list display mode: 1=compact,  0=verb
        NEW ShowBoth SET ShowBoth=0
        NEW ByTrade SET ByTrade=1

        DO GatherEmpties(.tempArray)
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric

        DO GetClasses(.Classes)
        DO KillIntro(.Classes)

        DO ShowEList(.tempArray,.Answers,CompactMode,ByTrade,ShowBoth)
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName

        WRITE !,"Now scanning unclassified drugs for possible CLASS matches...",!

        NEW TMGTOTAL SET TMGTOTAL=$$LISTCT^TMGMISC2("Answers")
        NEW TMGCUR
        NEW StartTime SET StartTime=$H
        NEW ProgressFn
        SET ProgressFn="if TMGCUR#10=1 DO PROGBAR^TMGUSRI2(TMGCUR,""Progress"",0,TMGTOTAL,,StartTime)"
        NEW abort SET abort=0
        NEW i SET i=$ORDER(Answers(""))
        IF i'="" FOR  DO  QUIT:(i="")!abort
        . IF $$KEYPRESD^TMGUSRI2()=27 DO  QUIT:abort=1
        . . NEW % SET %=2
        . . WRITE !,"Abort" DO YN^DICN WRITE !
        . . IF %=1 SET abort=1
        . NEW List SET List(i)=""
        . NEW class SET class=$$Guess1(.Array,.Answers,.List)
        . IF +class>0 do
        . . NEW ClassName,ClassCode,ClassIEN,TMGTradeName,DrugIEN
        . . SET ClassName=$PIECE(class,"^",3)
        . . SET ClassCode=$PIECE(class,"^",2)
        . . SET ClassIEN=$PIECE(class,"^",1)
        . . SET TMGTradeName=$PIECE(Answers(i),"^",3)
        . . SET DrugIEN=$PIECE(Answers(i),"^",1)
        . . SET Array("POSS MATCH",ClassName,TMGTradeName,DrugIEN)=ClassIEN_"^"_ClassCode
        . . DO CUU^TMGTERM(2) WRITE !
        . . NEW s SET s="Found: "_TMGTradeName_" --> "_ClassName
        . . SET s=s_"                                                          "
        . . WRITE $EXTRACT(s,1,79),!
        . IF $GET(ProgressFn)'="" do
        . . SET TMGCUR=i
        . . NEW $ETRAP SET $ETRAP="w ""??Progress function -- error trapped??"",!"
        . . xecute ProgressFn
        . SET i=$ORDER(Answers(i))

        QUIT



Guess1(Array,Answers,List)
        ;"Purpose: To return a guessed class, IF there is only one possible guess.
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to process.
        ;"              Format as follows.
        ;"                      List(Entry number)=""
        ;"                      List(Entry number)=""
        ;"Results: If only 1 matching class found, then classIEN^classCode^className, otherwise 0

        NEW ResultArray
        NEW result SET result=0
        DO GGuessList(.Array,.Answers,.List,.ResultArray)
        ;"              Results(Entry Number,"NAME",VASimilarDrugName)=ClassIEN^ClassCode^ClassName
        ;"              Results(Entry Number,"CLASS",ClassIEN)=ClassIEN^ClassCode^ClassName
        ;"              Results("ALL CLASSES",classIEN)=classIEN_"^"_classCode_"^"_className
        ;"              Results("ALL CLASSES",classIEN,matchName)=""

        ;"              Results(Entry Number,"NAME",VASimilarDrugName,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results(Entry Number,"CLASS",ClassIEN,vapIEN)=ClassIEN^ClassCode^ClassName_vapIEN
        ;"              Results("ALL CLASSES",ClassIEN)=ClassIEN_"^"_ClassCode_"^"_ClassName
        ;"              Results("ALL CLASSES",ClassIEN,matchName,vapIEN)=""


        IF $$LISTCT^TMGMISC2($name(ResultArray("ALL CLASSES")))=1 do
        . NEW classIEN
        . SET classIEN=$ORDER(ResultArray("ALL CLASSES",""))
        . SET result=$GET(ResultArray("ALL CLASSES",classIEN))

        QUIT result


DoSetTools(Array,Answers,List,EntryS,ByTradeName,ShowBoth)
        ;"Purpose: to provide tools for managing SETS to be worked on (List)
        ;"Input: Array -- PASS BY REFERENCE, array holding data, As created by Gather Classes
        ;"              Array("GENERIC NAME",VA GENERIC Name,DrugIEN)=""
        ;"              Array("TRADE NAME",TradeName,DrugIEN)=""
        ;"              Array("LINK GENERIC TO TRADE",TMGGeneric)=TradeName
        ;"              Array("LINK TRADE TO GENERIC",TradeName)=TMGGeneric
        ;"       Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an array of entries (user input values) to modify.
        ;"       EntryS -- PASS BY REFERENCE -- a string representing the current set.
        ;"       ByTradeName -- OPTIONAL, PASS BY REFERENCE, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, PASS BY REFERENCE, IF value=1 then trade name and generic names both shown.

        SET ByTradeName=$GET(ByTradeName,0)
        SET ShowBoth=$GET(ShowBoth,0)

        NEW input,done
        SET EntryS=$GET(EntryS)
        SET done=0

        FOR  DO  QUIT:(done=1)
        . WRITE !,"Tools to modify SET of entry numbers",!
        . WRITE "------------------------------------",!
        . WRITE "A=Add,  X=Remove from SET, C=Clear, D=Display, S=Search, ^ Return",!
        . WRITE "T=set TradeName ",$SELECT((ByTrade=1):"OFF",1:"ON"),", B=set Both names ",$SELECT((ShowBoth=1):"OFF",1:"ON"),!
        . read "Enter Option: ^// ",input:$GET(DTIME,3600),!
        . IF input="" SET input="^"
        . SET input=$$UP^XLFSTR(input)
        . IF input="^" WRITE ! SET done=1 QUIT
        . IF (input="?") do
        . . ;"do ShowInstructions()
        . . SET input="R"
        . ELSE  IF input="A" do
        . . read "Enter number(s) to ADD to list: ",input:$GET(DTIME,3600),!
        . . IF $$MkMultList^TMGMISC(input,.List) SET EntryS=EntryS_" & "_input
        . ELSE  IF input="X" do
        . . NEW tempList
        . . read "Enter number(s) to REMOVE to list: ",input:$GET(DTIME,3600),!
        . . IF $$MkMultList^TMGMISC(input,.tempList)=0 QUIT
        . . NEW i SET i=$ORDER(tempList(""))
        . . IF i'="" FOR  DO  QUIT:(i="")
        . . . KILL List(i)
        . . . SET i=$ORDER(tempList(i))
        . . SET EntryS=EntryS_" - "_input
        . ELSE  IF input="C" do
        . . KILL List SET EntryS=""
        . . SET input="D"
        . ELSE  IF input="S" do
        . . IF $$MkSrchList(.Answers,.List,.ByTradeName,.ShowBoth)=1 do
        . . . IF EntryS'="" SET EntryS=EntryS_" & "
        . . . SET EntryS=EntryS_" (SEARCH)"
        . . SET input="D"
        . ELSE  IF input="T" do
        . . SET ByTrade='ByTrade
        . . SET input="D"
        . ELSE  IF input="B" do
        . . SET ShowBoth='ShowBoth
        . . SET input="D"
        . IF input="D" do
        . . WRITE !,"Here is the current SET: ",EntryS,!
        . . DO Disp2List(.Answers,.List,.ByTradeName,.ShowBoth)
        . . ;"new temp read " -- Press [ENTER] to Continue --",temp:$GET(DTIME,3600),!

        QUIT

MkSrchList(Answers,List,ByTradeName,ShowBoth)
        ;"Purpose: to search through Answers for string
        ;"Input: Answers -- PASS BY REFERENCE, an array linking display number to IENS.
        ;"              Array should be the one created by ShowEList
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"              Answer(count)=DrugIEN^GenericDrugName^TradeName
        ;"       List -- PASS BY REFERENCE -- an OUT PARAMETER, to hold array of entries (user input values)
        ;"              prior entries are NOT KILLED
        ;"       ByTradeName -- OPTIONAL, IF value=1, then values are shown by TradeName
        ;"       ShowBoth -- OPTIONAL, IF value=1 then trade name and generic names both shown.
        ;"Results: 1=some added to list, 0=none added to list.

        SET ByTradeName=$GET(ByTradeName,0)
        SET ShowBoth=$GET(ShowBoth,0)
        NEW result SET result=0

        NEW input
        WRITE !,"Search in ",$SELECT((ByTradeName=1):"TRADE NAME",1:"GENRIC NAME")
        IF ShowBoth WRITE " and ",$SELECT((ByTradeName=0):"TRADE NAME",1:"GENRIC NAME")
        read !,"Entry text to SEARCH for in entries: ^// ",input:$GET(DTIME,3600),!
        IF input="" SET input="^"
        SET input=$$UP^XLFSTR(input)
        IF input="^" GOTO MSLDone
        NEW i SET i=$ORDER(Answers(""))
        IF i'="" FOR  DO  QUIT:(i="")
        . NEW TradeName,GenericName
        . SET GenericName=$$UP^XLFSTR($PIECE($GET(Answers(i)),"^",2))
        . SET TradeName=$$UP^XLFSTR($PIECE($GET(Answers(i)),"^",3))
        . IF (ByTradeName=1)!(ShowBoth=1) do
        . . IF TradeName[input SET List(i)="",result=1
        . IF (ByTradeName=0)!(ShowBoth=1) do
        . . IF GenericName[input SET List(i)="",result=1
        . SET i=$ORDER(Answers(i))

MSLDone
        QUIT result

 ;"=================================================================

SelEdClasses
        ;"Purpose: Allow user to browse classes with selector
        ;"Input: none
        ;"Results: none

        NEW Options,IEN
        SET Options("FIELDS",1)=".09:1^VA DRUG CLASS^24"
        SET Options("FIELDS",1,"LOOKUP FN")="$$SECLookup^TMGNDF3A()"
        SET Options("FIELDS",2)=".05^TRADENAME^24"
        SET Options("FIELDS",2,"NO EDIT")=1  ;"i.e. show for browsing, but don't allow edit
        SET Options("FIELDS",3)=".07^GENERIC NAME^24"
        SET Options("FIELDS",3,"NO EDIT")=1  ;"i.e. show for browsing, but don't allow edit
        SET Options("FIELDS","MAX NUM")=3
        SET Options("FILE")="22706.9^TMG FDA IMPORT COMPILED"
        ;"Get all records with SKIP THIS RECORD = 0 (KEEP)

        WRITE "Finding records not marked to be skipped...",!
        DO GetFldValue^TMGSELED(22706.9,6,0,$name(Options("IEN LIST")))

SEC1
        IF $$SELED^TMGSELED(.Options)'=2 GOTO SECDone
        IF $$GetIENs^TMGSELED(.Options)=0 GOTO SECDone
        GOTO SEC1

SECDone QUIT


Ed1Classes
        ;"Purpose: Allow user to browse classes with selector
        ;"Input: none
        ;"Results: none

        NEW Options,IEN
        SET Options("FIELDS",1)=".09:1^VA DRUG CLASS^24"
        SET Options("FIELDS",1,"LOOKUP FN")="$$SECLookup^TMGNDF3A()"
        SET Options("FIELDS",2)=".05^TRADENAME^24"
        SET Options("FIELDS",2,"NO EDIT")=1  ;"i.e. show for browsing, but don't allow edit
        SET Options("FIELDS",3)=".07^GENERIC NAME^24"
        SET Options("FIELDS",3,"NO EDIT")=1  ;"i.e. show for browsing, but don't allow edit
        SET Options("FIELDS","MAX NUM")=3
        SET Options("FILE")="22706.9^TMG FDA IMPORT COMPILED"
        ;"Get all records with SKIP THIS RECORD = 0 (KEEP)

        NEW DIC,X,Y
        SET DIC=22706.9
        SET DIC(0)="MAEQ"
        DO ^DIC WRITE !
        IF +Y'>0 GOTO E1Done
        SET Options("IEN LIST",+Y)=""

E1
        IF $$SELED^TMGSELED(.Options)'=2 GOTO E1Done
        IF $$GetIENs^TMGSELED(.Options)=0 GOTO E1Done
        GOTO E1

E1Done QUIT


SECLookup()
        ;"Purpose: A custom call-back function that the selector will use
        ;"         for looking up class of a given record or list of records.
        ;"Input: None (because this is to be used only for ONE field)
        ;"Results: Returns IEN for Class, or 0 IF not found or abort.

        NEW Classes,UsrClassIEN

        DO GetClasses(.Classes)
        DO KillIntro(.Classes)
        SET UsrClassIEN=$$SelectClass(.Classes)

        QUIT UsrClassIEN
